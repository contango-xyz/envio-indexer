//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlAbi = [
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChainlinkAggregatorV2V3Mock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const chainlinkAggregatorV2V3MockAbi = [
  {
    type: "function",
    inputs: [],
    name: "aggregator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "description",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "getAnswer",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "roundId", internalType: "uint80", type: "uint80" }],
    name: "getRoundData",
    outputs: [
      { name: "roundId_", internalType: "uint80", type: "uint80" },
      { name: "answer", internalType: "int256", type: "int256" },
      { name: "startedAt", internalType: "uint256", type: "uint256" },
      { name: "updatedAt", internalType: "uint256", type: "uint256" },
      { name: "answeredInRound", internalType: "uint80", type: "uint80" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "getTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestAnswer",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestRound",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestRoundData",
    outputs: [
      { name: "roundId", internalType: "uint80", type: "uint80" },
      { name: "answer", internalType: "int256", type: "int256" },
      { name: "startedAt", internalType: "uint256", type: "uint256" },
      { name: "updatedAt", internalType: "uint256", type: "uint256" },
      { name: "answeredInRound", internalType: "uint80", type: "uint80" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "maxAnswer",
    outputs: [{ name: "", internalType: "int192", type: "int192" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [],
    name: "minAnswer",
    outputs: [{ name: "", internalType: "int192", type: "int192" }],
    stateMutability: "pure",
  },
  { type: "function", inputs: [], name: "price", outputs: [{ name: "", internalType: "int256", type: "int256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [{ name: "_price", internalType: "int256", type: "int256" }],
    name: "set",
    outputs: [{ name: "", internalType: "contract ChainlinkAggregatorV2V3Mock", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_decimals", internalType: "uint8", type: "uint8" }],
    name: "setDecimals",
    outputs: [{ name: "", internalType: "contract ChainlinkAggregatorV2V3Mock", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "pure",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "current", internalType: "int256", type: "int256", indexed: true },
      { name: "roundId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "updatedAt", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "AnswerUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "roundId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "startedBy", internalType: "address", type: "address", indexed: true },
      { name: "startedAt", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NewRound",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CometMoneyMarketView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cometMoneyMarketViewAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_contango", internalType: "contract IContango", type: "address" },
      { name: "_nativeToken", internalType: "contract IWETH9", type: "address" },
      { name: "_nativeUsdOracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_reverseLookup", internalType: "contract CometReverseLookup", type: "address" },
      { name: "_cometRewards", internalType: "contract ICometRewards", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "rate_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "cometRewards",
    outputs: [{ name: "", internalType: "contract ICometRewards", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeUsdOracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rawData",
    outputs: [
      {
        name: "data",
        internalType: "struct CometMoneyMarketView.RawData",
        type: "tuple",
        components: [
          {
            name: "irmData",
            internalType: "struct CometMoneyMarketView.IRMData",
            type: "tuple",
            components: [
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "borrowKink", internalType: "uint256", type: "uint256" },
              { name: "borrowPerSecondInterestRateSlopeLow", internalType: "uint256", type: "uint256" },
              { name: "borrowPerSecondInterestRateSlopeHigh", internalType: "uint256", type: "uint256" },
              { name: "borrowPerSecondInterestRateBase", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "rewardsData",
            internalType: "struct CometMoneyMarketView.RewardsData",
            type: "tuple",
            components: [
              { name: "baseTrackingBorrowSpeed", internalType: "uint256", type: "uint256" },
              { name: "baseIndexScale", internalType: "uint256", type: "uint256" },
              { name: "baseAccrualScale", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "claimable", internalType: "uint256", type: "uint256" },
              {
                name: "token",
                internalType: "struct TokenData",
                type: "tuple",
                components: [
                  { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "symbol", internalType: "string", type: "string" },
                  { name: "decimals", internalType: "uint8", type: "uint8" },
                  { name: "unit", internalType: "uint256", type: "uint256" },
                ],
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "reverseLookup",
    outputs: [{ name: "", internalType: "contract CometReverseLookup", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "OracleNotFound" },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
    ],
    name: "PRBMath_MulDiv18_Overflow",
  },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "denominator", internalType: "uint256", type: "uint256" },
    ],
    name: "PRBMath_MulDiv_Overflow",
  },
  { type: "error", inputs: [{ name: "x", internalType: "UD60x18", type: "uint256" }], name: "PRBMath_UD60x18_Exp2_InputTooBig" },
  { type: "error", inputs: [{ name: "x", internalType: "UD60x18", type: "uint256" }], name: "PRBMath_UD60x18_Log_InputTooSmall" },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedAsset" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Contango
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contangoAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "nft", internalType: "contract PositionNFT", type: "address" },
      { name: "v", internalType: "contract IVault", type: "address" },
      { name: "pf", internalType: "contract IUnderlyingPositionFactory", type: "address" },
      { name: "spot", internalType: "contract SpotExecutor", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "repayTo", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeClose",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amountOwed", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeOpenFromFlashBorrow",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "repayTo", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeOpenFromFlashLoan",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "base", internalType: "contract IERC20Metadata", type: "address" },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "createInstrument",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "donatePosition",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }],
    name: "instrument",
    outputs: [
      {
        name: "instrument_",
        internalType: "struct Instrument",
        type: "tuple",
        components: [
          { name: "base", internalType: "contract IERC20Metadata", type: "address" },
          { name: "baseUnit", internalType: "uint256", type: "uint256" },
          { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
          { name: "quoteUnit", internalType: "uint256", type: "uint256" },
          { name: "closingOnly", internalType: "bool", type: "bool" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "lastOwner",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "closingOnly", internalType: "bool", type: "bool" },
    ],
    name: "setClosingOnly",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "spotExecutor",
    outputs: [{ name: "", internalType: "contract SpotExecutor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "trade",
    outputs: [
      { name: "", internalType: "PositionId", type: "bytes32" },
      {
        name: "",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "tradeOnBehalfOf",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "closingOnly", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ClosingOnlySet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "base", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address", indexed: false },
    ],
    name: "InstrumentCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: false },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "PositionDonated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "tradedBy", internalType: "address", type: "address", indexed: true },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8", indexed: false },
      { name: "cashflow", internalType: "int256", type: "int256", indexed: false },
      { name: "quantityDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "price", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "feeCcy", internalType: "enum Currency", type: "uint8", indexed: false },
    ],
    name: "PositionUpserted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "RewardsClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Unpaused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "Unauthorised" },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContangoPerpetualOption
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contangoPerpetualOptionAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_treasury", internalType: "address", type: "address" },
      { name: "_tangoOracle", internalType: "contract DIAOracleV2", type: "address" },
      { name: "_tango", internalType: "contract IERC20Metadata", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "A", outputs: [{ name: "", internalType: "SD59x18", type: "int256" }], stateMutability: "view" },
  { type: "function", inputs: [], name: "B", outputs: [{ name: "", internalType: "SD59x18", type: "int256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DIA_UNIT_DIFF",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "MAX_DISCOUNT",
    outputs: [{ name: "", internalType: "SD59x18", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "ORACLE_TOLERANCE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "START_FLAT",
    outputs: [{ name: "", internalType: "SD59x18", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "TANGO_SEED_PRICE",
    outputs: [{ name: "", internalType: "SD59x18", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "USDC",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "USDC_UNIT_DIFF",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "SD59x18", type: "int256" },
      { name: "maxPrice", internalType: "SD59x18", type: "int256" },
    ],
    name: "exercise",
    outputs: [
      { name: "tangoPrice_", internalType: "SD59x18", type: "int256" },
      { name: "discount", internalType: "SD59x18", type: "int256" },
      { name: "strikePrice", internalType: "SD59x18", type: "int256" },
      { name: "cost", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "SD59x18", type: "int256" },
      { name: "maxPrice", internalType: "SD59x18", type: "int256" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "exercise",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "floorPrice",
    outputs: [{ name: "", internalType: "SD59x18", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "fund",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "initialisePermit", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "initialize", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "SD59x18", type: "int256" }],
    name: "previewExercise",
    outputs: [
      { name: "tangoPrice_", internalType: "SD59x18", type: "int256" },
      { name: "discount", internalType: "SD59x18", type: "int256" },
      { name: "strikePrice", internalType: "SD59x18", type: "int256" },
      { name: "cost", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "tango",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "tangoOracle",
    outputs: [{ name: "", internalType: "contract DIAOracleV2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "tangoPrice",
    outputs: [{ name: "", internalType: "SD59x18", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "newFloorPrice", internalType: "SD59x18", type: "int256" }],
    name: "updateFloorPrice",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "SD59x18", type: "int256", indexed: false },
      { name: "tangoPrice", internalType: "SD59x18", type: "int256", indexed: false },
      { name: "discount", internalType: "SD59x18", type: "int256", indexed: false },
      { name: "strikePrice", internalType: "SD59x18", type: "int256", indexed: false },
      { name: "cost", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Exercised",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "newFloorPrice", internalType: "SD59x18", type: "int256", indexed: false }],
    name: "FloorPriceUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Unpaused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
  { type: "error", inputs: [{ name: "floorPrice", internalType: "SD59x18", type: "int256" }], name: "InvalidFloorPrice" },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
    ],
    name: "PRBMath_MulDiv18_Overflow",
  },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "denominator", internalType: "uint256", type: "uint256" },
    ],
    name: "PRBMath_MulDiv_Overflow",
  },
  { type: "error", inputs: [], name: "PRBMath_SD59x18_Div_InputTooSmall" },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "SD59x18", type: "int256" },
      { name: "y", internalType: "SD59x18", type: "int256" },
    ],
    name: "PRBMath_SD59x18_Div_Overflow",
  },
  { type: "error", inputs: [{ name: "x", internalType: "SD59x18", type: "int256" }], name: "PRBMath_SD59x18_IntoUint256_Underflow" },
  { type: "error", inputs: [{ name: "x", internalType: "SD59x18", type: "int256" }], name: "PRBMath_SD59x18_Log_InputTooSmall" },
  { type: "error", inputs: [], name: "PRBMath_SD59x18_Mul_InputTooSmall" },
  {
    type: "error",
    inputs: [
      { name: "x", internalType: "SD59x18", type: "int256" },
      { name: "y", internalType: "SD59x18", type: "int256" },
    ],
    name: "PRBMath_SD59x18_Mul_Overflow",
  },
  {
    type: "error",
    inputs: [
      { name: "max", internalType: "SD59x18", type: "int256" },
      { name: "actual", internalType: "SD59x18", type: "int256" },
    ],
    name: "SlippageCheck",
  },
  {
    type: "error",
    inputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256" },
      { name: "price", internalType: "uint256", type: "uint256" },
    ],
    name: "StaleOraclePrice",
  },
  { type: "error", inputs: [], name: "ZeroCost" },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
  { type: "error", inputs: [], name: "ZeroPrice" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EulerMoneyMarketView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eulerMoneyMarketViewAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_contango", internalType: "contract IContango", type: "address" },
      { name: "_nativeToken", internalType: "contract IWETH9", type: "address" },
      { name: "_nativeUsdOracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_reverseLookup", internalType: "contract EulerReverseLookup", type: "address" },
      { name: "_rewardOperator", internalType: "contract EulerRewardsOperator", type: "address" },
      { name: "_lens", internalType: "contract IEulerVaultLens", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "USD",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "rate_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "lens",
    outputs: [{ name: "", internalType: "contract IEulerVaultLens", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeUsdOracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rawData",
    outputs: [
      {
        name: "data",
        internalType: "struct EulerMoneyMarketView.RawData",
        type: "tuple",
        components: [
          {
            name: "baseData",
            internalType: "struct IEulerVaultLens.VaultInfoFull",
            type: "tuple",
            components: [
              { name: "timestamp", internalType: "uint256", type: "uint256" },
              { name: "vault", internalType: "contract IEulerVault", type: "address" },
              { name: "vaultName", internalType: "string", type: "string" },
              { name: "vaultSymbol", internalType: "string", type: "string" },
              { name: "vaultDecimals", internalType: "uint256", type: "uint256" },
              { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
              { name: "assetName", internalType: "string", type: "string" },
              { name: "assetSymbol", internalType: "string", type: "string" },
              { name: "assetDecimals", internalType: "uint256", type: "uint256" },
              { name: "unitOfAccount", internalType: "address", type: "address" },
              { name: "unitOfAccountName", internalType: "string", type: "string" },
              { name: "unitOfAccountSymbol", internalType: "string", type: "string" },
              { name: "unitOfAccountDecimals", internalType: "uint256", type: "uint256" },
              { name: "totalShares", internalType: "uint256", type: "uint256" },
              { name: "totalCash", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowed", internalType: "uint256", type: "uint256" },
              { name: "totalAssets", internalType: "uint256", type: "uint256" },
              { name: "accumulatedFeesShares", internalType: "uint256", type: "uint256" },
              { name: "accumulatedFeesAssets", internalType: "uint256", type: "uint256" },
              { name: "governorFeeReceiver", internalType: "address", type: "address" },
              { name: "protocolFeeReceiver", internalType: "address", type: "address" },
              { name: "protocolFeeShare", internalType: "uint256", type: "uint256" },
              { name: "interestFee", internalType: "uint256", type: "uint256" },
              { name: "hookedOperations", internalType: "uint256", type: "uint256" },
              { name: "configFlags", internalType: "uint256", type: "uint256" },
              { name: "supplyCap", internalType: "uint256", type: "uint256" },
              { name: "borrowCap", internalType: "uint256", type: "uint256" },
              { name: "maxLiquidationDiscount", internalType: "uint256", type: "uint256" },
              { name: "liquidationCoolOffTime", internalType: "uint256", type: "uint256" },
              { name: "dToken", internalType: "address", type: "address" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "interestRateModel", internalType: "address", type: "address" },
              { name: "hookTarget", internalType: "address", type: "address" },
              { name: "evc", internalType: "address", type: "address" },
              { name: "protocolConfig", internalType: "address", type: "address" },
              { name: "balanceTracker", internalType: "address", type: "address" },
              { name: "permit2", internalType: "address", type: "address" },
              { name: "creator", internalType: "address", type: "address" },
              { name: "governorAdmin", internalType: "address", type: "address" },
              {
                name: "irmInfo",
                internalType: "struct IEulerVaultLens.VaultInterestRateModelInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "vault", internalType: "contract IEulerVault", type: "address" },
                  { name: "interestRateModel", internalType: "address", type: "address" },
                  {
                    name: "interestRateInfo",
                    internalType: "struct IEulerVaultLens.InterestRateInfo[]",
                    type: "tuple[]",
                    components: [
                      { name: "cash", internalType: "uint256", type: "uint256" },
                      { name: "borrows", internalType: "uint256", type: "uint256" },
                      { name: "borrowSPY", internalType: "uint256", type: "uint256" },
                      { name: "supplySPY", internalType: "uint256", type: "uint256" },
                      { name: "borrowAPY", internalType: "uint256", type: "uint256" },
                      { name: "supplyAPY", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "interestRateModelInfo",
                    internalType: "struct IEulerVaultLens.InterestRateModelDetailedInfo",
                    type: "tuple",
                    components: [
                      { name: "interestRateModel", internalType: "address", type: "address" },
                      { name: "interestRateModelType", internalType: "IEulerVaultLens.InterestRateModelType", type: "uint8" },
                      { name: "interestRateModelParams", internalType: "bytes", type: "bytes" },
                    ],
                  },
                ],
              },
              {
                name: "collateralLTVInfo",
                internalType: "struct IEulerVaultLens.LTVInfo[]",
                type: "tuple[]",
                components: [
                  { name: "collateral", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "borrowLTV", internalType: "uint256", type: "uint256" },
                  { name: "liquidationLTV", internalType: "uint256", type: "uint256" },
                  { name: "initialLiquidationLTV", internalType: "uint256", type: "uint256" },
                  { name: "targetTimestamp", internalType: "uint256", type: "uint256" },
                  { name: "rampDuration", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "liabilityPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "collateralPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo[]",
                type: "tuple[]",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "oracleInfo",
                internalType: "struct IEulerVaultLens.OracleDetailedInfo",
                type: "tuple",
                components: [
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "oracleInfo", internalType: "bytes", type: "bytes" },
                ],
              },
              {
                name: "backupAssetPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "backupAssetOracleInfo",
                internalType: "struct IEulerVaultLens.OracleDetailedInfo",
                type: "tuple",
                components: [
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "oracleInfo", internalType: "bytes", type: "bytes" },
                ],
              },
            ],
          },
          {
            name: "quoteData",
            internalType: "struct IEulerVaultLens.VaultInfoFull",
            type: "tuple",
            components: [
              { name: "timestamp", internalType: "uint256", type: "uint256" },
              { name: "vault", internalType: "contract IEulerVault", type: "address" },
              { name: "vaultName", internalType: "string", type: "string" },
              { name: "vaultSymbol", internalType: "string", type: "string" },
              { name: "vaultDecimals", internalType: "uint256", type: "uint256" },
              { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
              { name: "assetName", internalType: "string", type: "string" },
              { name: "assetSymbol", internalType: "string", type: "string" },
              { name: "assetDecimals", internalType: "uint256", type: "uint256" },
              { name: "unitOfAccount", internalType: "address", type: "address" },
              { name: "unitOfAccountName", internalType: "string", type: "string" },
              { name: "unitOfAccountSymbol", internalType: "string", type: "string" },
              { name: "unitOfAccountDecimals", internalType: "uint256", type: "uint256" },
              { name: "totalShares", internalType: "uint256", type: "uint256" },
              { name: "totalCash", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowed", internalType: "uint256", type: "uint256" },
              { name: "totalAssets", internalType: "uint256", type: "uint256" },
              { name: "accumulatedFeesShares", internalType: "uint256", type: "uint256" },
              { name: "accumulatedFeesAssets", internalType: "uint256", type: "uint256" },
              { name: "governorFeeReceiver", internalType: "address", type: "address" },
              { name: "protocolFeeReceiver", internalType: "address", type: "address" },
              { name: "protocolFeeShare", internalType: "uint256", type: "uint256" },
              { name: "interestFee", internalType: "uint256", type: "uint256" },
              { name: "hookedOperations", internalType: "uint256", type: "uint256" },
              { name: "configFlags", internalType: "uint256", type: "uint256" },
              { name: "supplyCap", internalType: "uint256", type: "uint256" },
              { name: "borrowCap", internalType: "uint256", type: "uint256" },
              { name: "maxLiquidationDiscount", internalType: "uint256", type: "uint256" },
              { name: "liquidationCoolOffTime", internalType: "uint256", type: "uint256" },
              { name: "dToken", internalType: "address", type: "address" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "interestRateModel", internalType: "address", type: "address" },
              { name: "hookTarget", internalType: "address", type: "address" },
              { name: "evc", internalType: "address", type: "address" },
              { name: "protocolConfig", internalType: "address", type: "address" },
              { name: "balanceTracker", internalType: "address", type: "address" },
              { name: "permit2", internalType: "address", type: "address" },
              { name: "creator", internalType: "address", type: "address" },
              { name: "governorAdmin", internalType: "address", type: "address" },
              {
                name: "irmInfo",
                internalType: "struct IEulerVaultLens.VaultInterestRateModelInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "vault", internalType: "contract IEulerVault", type: "address" },
                  { name: "interestRateModel", internalType: "address", type: "address" },
                  {
                    name: "interestRateInfo",
                    internalType: "struct IEulerVaultLens.InterestRateInfo[]",
                    type: "tuple[]",
                    components: [
                      { name: "cash", internalType: "uint256", type: "uint256" },
                      { name: "borrows", internalType: "uint256", type: "uint256" },
                      { name: "borrowSPY", internalType: "uint256", type: "uint256" },
                      { name: "supplySPY", internalType: "uint256", type: "uint256" },
                      { name: "borrowAPY", internalType: "uint256", type: "uint256" },
                      { name: "supplyAPY", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "interestRateModelInfo",
                    internalType: "struct IEulerVaultLens.InterestRateModelDetailedInfo",
                    type: "tuple",
                    components: [
                      { name: "interestRateModel", internalType: "address", type: "address" },
                      { name: "interestRateModelType", internalType: "IEulerVaultLens.InterestRateModelType", type: "uint8" },
                      { name: "interestRateModelParams", internalType: "bytes", type: "bytes" },
                    ],
                  },
                ],
              },
              {
                name: "collateralLTVInfo",
                internalType: "struct IEulerVaultLens.LTVInfo[]",
                type: "tuple[]",
                components: [
                  { name: "collateral", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "borrowLTV", internalType: "uint256", type: "uint256" },
                  { name: "liquidationLTV", internalType: "uint256", type: "uint256" },
                  { name: "initialLiquidationLTV", internalType: "uint256", type: "uint256" },
                  { name: "targetTimestamp", internalType: "uint256", type: "uint256" },
                  { name: "rampDuration", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "liabilityPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "collateralPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo[]",
                type: "tuple[]",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "oracleInfo",
                internalType: "struct IEulerVaultLens.OracleDetailedInfo",
                type: "tuple",
                components: [
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "oracleInfo", internalType: "bytes", type: "bytes" },
                ],
              },
              {
                name: "backupAssetPriceInfo",
                internalType: "struct IEulerVaultLens.AssetPriceInfo",
                type: "tuple",
                components: [
                  { name: "queryFailure", internalType: "bool", type: "bool" },
                  { name: "queryFailureReason", internalType: "bytes", type: "bytes" },
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "unitOfAccount", internalType: "address", type: "address" },
                  { name: "amountIn", internalType: "uint256", type: "uint256" },
                  { name: "amountOutMid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutBid", internalType: "uint256", type: "uint256" },
                  { name: "amountOutAsk", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "backupAssetOracleInfo",
                internalType: "struct IEulerVaultLens.OracleDetailedInfo",
                type: "tuple",
                components: [
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "oracleInfo", internalType: "bytes", type: "bytes" },
                ],
              },
            ],
          },
          {
            name: "rewardsData",
            internalType: "struct EulerMoneyMarketView.RewardsData[]",
            type: "tuple[]",
            components: [
              {
                name: "rewardData",
                internalType: "struct IEulerVaultLens.VaultRewardInfo",
                type: "tuple",
                components: [
                  { name: "timestamp", internalType: "uint256", type: "uint256" },
                  { name: "vault", internalType: "contract IEulerVault", type: "address" },
                  { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "rewardName", internalType: "string", type: "string" },
                  { name: "rewardSymbol", internalType: "string", type: "string" },
                  { name: "rewardDecimals", internalType: "uint8", type: "uint8" },
                  { name: "balanceTracker", internalType: "address", type: "address" },
                  { name: "epochDuration", internalType: "uint256", type: "uint256" },
                  { name: "currentEpoch", internalType: "uint256", type: "uint256" },
                  { name: "totalRewardedEligible", internalType: "uint256", type: "uint256" },
                  { name: "totalRewardRegistered", internalType: "uint256", type: "uint256" },
                  { name: "totalRewardClaimed", internalType: "uint256", type: "uint256" },
                  {
                    name: "epochInfoPrevious",
                    internalType: "struct IEulerVaultLens.RewardAmountInfo[]",
                    type: "tuple[]",
                    components: [
                      { name: "epoch", internalType: "uint256", type: "uint256" },
                      { name: "epochStart", internalType: "uint256", type: "uint256" },
                      { name: "epochEnd", internalType: "uint256", type: "uint256" },
                      { name: "rewardAmount", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "epochInfoUpcoming",
                    internalType: "struct IEulerVaultLens.RewardAmountInfo[]",
                    type: "tuple[]",
                    components: [
                      { name: "epoch", internalType: "uint256", type: "uint256" },
                      { name: "epochStart", internalType: "uint256", type: "uint256" },
                      { name: "epochEnd", internalType: "uint256", type: "uint256" },
                      { name: "rewardAmount", internalType: "uint256", type: "uint256" },
                    ],
                  },
                ],
              },
              { name: "currentEpoch", internalType: "uint256", type: "uint256" },
              { name: "claimable", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "reverseLookup",
    outputs: [{ name: "", internalType: "contract EulerReverseLookup", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardOperator",
    outputs: [{ name: "", internalType: "contract EulerRewardsOperator", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedAsset" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EulerReverseLookup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eulerReverseLookupAbi = [
  { type: "constructor", inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "base",
    outputs: [{ name: "", internalType: "contract IEulerVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    name: "idToVault",
    outputs: [{ name: "vault", internalType: "contract IEulerVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nextId",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "quote",
    outputs: [{ name: "", internalType: "contract IEulerVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_vault", internalType: "contract IEulerVault", type: "address" }],
    name: "setVault",
    outputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    name: "vault",
    outputs: [{ name: "_vault", internalType: "contract IEulerVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault", internalType: "contract IEulerVault", type: "address" }],
    name: "vaultToId",
    outputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint16", type: "uint16", indexed: true },
      { name: "vault", internalType: "contract IEulerVault", type: "address", indexed: true },
    ],
    name: "VaultSet",
  },
  { type: "error", inputs: [{ name: "id", internalType: "uint16", type: "uint16" }], name: "VaultAlreadySet" },
  { type: "error", inputs: [{ name: "id", internalType: "uint16", type: "uint16" }], name: "VaultNotFound" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EulerReverseLookupEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eulerReverseLookupEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint16", type: "uint16", indexed: true },
      { name: "vault", internalType: "contract IEulerVault", type: "address", indexed: true },
    ],
    name: "VaultSet",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EulerRewardsOperator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eulerRewardsOperatorAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "timelock", internalType: "Timelock", type: "address" },
      { name: "_positionNFT", internalType: "contract PositionNFT", type: "address" },
      { name: "_positionFactory", internalType: "contract IUnderlyingPositionFactory", type: "address" },
      { name: "_evc", internalType: "contract IEthereumVaultConnector", type: "address" },
      { name: "_rewards", internalType: "contract IRewardStreams", type: "address" },
      { name: "_reverseLookup", internalType: "contract EulerReverseLookup", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault", internalType: "contract IEulerVault", type: "address" },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "addLiveReward",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimAllRewards",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "disableReward",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "enableLiveRewards",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "enableReward",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "evc",
    outputs: [{ name: "", internalType: "contract IEthereumVaultConnector", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault", internalType: "contract IEulerVault", type: "address" }],
    name: "liveRewards",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault", internalType: "contract IEulerVault", type: "address" },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "removeLiveReward",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "reverseLookup",
    outputs: [{ name: "", internalType: "contract EulerReverseLookup", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardStreams",
    outputs: [{ name: "", internalType: "contract IRewardStreams", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "reward", internalType: "contract IERC20Metadata", type: "address", indexed: false }],
    name: "LiveRewardAdded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "reward", internalType: "contract IERC20Metadata", type: "address", indexed: false }],
    name: "LiveRewardRemoved",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: false },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "to", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "RewardClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: false },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address", indexed: false },
    ],
    name: "RewardDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: false },
      { name: "reward", internalType: "contract IERC20Metadata", type: "address", indexed: false },
    ],
    name: "RewardEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  { type: "error", inputs: [], name: "InvalidReward" },
  { type: "error", inputs: [], name: "TooManyRewards" },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "Unauthorised" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExactlyReverseLookup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exactlyReverseLookupAbi = [
  {
    type: "constructor",
    inputs: [{ name: "_auditor", internalType: "contract IAuditor", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "market", internalType: "contract IExactlyMarket", type: "address" }],
    name: "assets",
    outputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "auditor",
    outputs: [{ name: "", internalType: "contract IAuditor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "market",
    outputs: [{ name: "_market", internalType: "contract IExactlyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "markets",
    outputs: [{ name: "market", internalType: "contract IExactlyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_market", internalType: "contract IExactlyMarket", type: "address" }],
    name: "setMarket",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "market", internalType: "contract IExactlyMarket", type: "address", indexed: true },
    ],
    name: "MarketSet",
  },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "MarketNotFound" },
  { type: "error", inputs: [{ name: "market", internalType: "contract IExactlyMarket", type: "address" }], name: "MarketNotListed" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExactlyReverseLookupEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exactlyReverseLookupEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "market", internalType: "contract IExactlyMarket", type: "address", indexed: true },
    ],
    name: "MarketSet",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FluidMoneyMarketView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fluidMoneyMarketViewAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_contango", internalType: "contract IContango", type: "address" },
      { name: "_nativeToken", internalType: "contract IWETH9", type: "address" },
      { name: "_nativeUsdOracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_vaultResolver", internalType: "contract IFluidVaultResolver", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "rate_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "liquidityResolver",
    outputs: [{ name: "", internalType: "contract IFluidLiquidityResolver", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeUsdOracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rawData",
    outputs: [
      {
        name: "data",
        internalType: "struct FluidMoneyMarketView.RawData",
        type: "tuple",
        components: [
          {
            name: "vaultData",
            internalType: "struct IFluidVaultResolver.VaultEntireData",
            type: "tuple",
            components: [
              { name: "vault", internalType: "address", type: "address" },
              {
                name: "constantVariables",
                internalType: "struct IFluidVaultResolver.ConstantViews",
                type: "tuple",
                components: [
                  { name: "liquidity", internalType: "address", type: "address" },
                  { name: "factory", internalType: "address", type: "address" },
                  { name: "adminImplementation", internalType: "address", type: "address" },
                  { name: "secondaryImplementation", internalType: "address", type: "address" },
                  { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
                  { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
                  { name: "vaultId", internalType: "uint256", type: "uint256" },
                  { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
                  { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
                  { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
                  { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
                ],
              },
              {
                name: "configs",
                internalType: "struct IFluidVaultResolver.Configs",
                type: "tuple",
                components: [
                  { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
                  { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
                  { name: "collateralFactor", internalType: "uint16", type: "uint16" },
                  { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
                  { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
                  { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
                  { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
                  { name: "borrowFee", internalType: "uint16", type: "uint16" },
                  { name: "oracle", internalType: "address", type: "address" },
                  { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
                  { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
                  { name: "rebalancer", internalType: "address", type: "address" },
                ],
              },
              {
                name: "exchangePricesAndRates",
                internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
                type: "tuple",
                components: [
                  { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
                  { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
                  { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
                  { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "rewardsRate", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "totalSupplyAndBorrow",
                internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
                type: "tuple",
                components: [
                  { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
                  { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
                  { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "limitsAndAvailability",
                internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
                type: "tuple",
                components: [
                  { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
                  { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
                  { name: "withdrawable", internalType: "uint256", type: "uint256" },
                  { name: "borrowLimit", internalType: "uint256", type: "uint256" },
                  { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
                  { name: "borrowable", internalType: "uint256", type: "uint256" },
                  { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
                  { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "vaultState",
                internalType: "struct IFluidVaultResolver.VaultState",
                type: "tuple",
                components: [
                  { name: "totalPositions", internalType: "uint256", type: "uint256" },
                  { name: "topTick", internalType: "int256", type: "int256" },
                  { name: "currentBranch", internalType: "uint256", type: "uint256" },
                  { name: "totalBranch", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrow", internalType: "uint256", type: "uint256" },
                  { name: "totalSupply", internalType: "uint256", type: "uint256" },
                  {
                    name: "currentBranchState",
                    internalType: "struct IFluidVaultResolver.CurrentBranchState",
                    type: "tuple",
                    components: [
                      { name: "status", internalType: "uint256", type: "uint256" },
                      { name: "minimaTick", internalType: "int256", type: "int256" },
                      { name: "debtFactor", internalType: "uint256", type: "uint256" },
                      { name: "partials", internalType: "uint256", type: "uint256" },
                      { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                      { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                      { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                    ],
                  },
                ],
              },
              {
                name: "liquidityUserSupplyData",
                internalType: "struct IFluidVaultResolver.UserSupplyData",
                type: "tuple",
                components: [
                  { name: "modeWithInterest", internalType: "bool", type: "bool" },
                  { name: "supply", internalType: "uint256", type: "uint256" },
                  { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
                  { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
                  { name: "expandPercent", internalType: "uint256", type: "uint256" },
                  { name: "expandDuration", internalType: "uint256", type: "uint256" },
                  { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
                  { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
                  { name: "withdrawable", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "liquidityUserBorrowData",
                internalType: "struct IFluidVaultResolver.UserBorrowData",
                type: "tuple",
                components: [
                  { name: "modeWithInterest", internalType: "bool", type: "bool" },
                  { name: "borrow", internalType: "uint256", type: "uint256" },
                  { name: "borrowLimit", internalType: "uint256", type: "uint256" },
                  { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
                  { name: "expandPercent", internalType: "uint256", type: "uint256" },
                  { name: "expandDuration", internalType: "uint256", type: "uint256" },
                  { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
                  { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
                  { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
                  { name: "borrowable", internalType: "uint256", type: "uint256" },
                  { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
                ],
              },
            ],
          },
          {
            name: "baseTokenData",
            internalType: "struct IFluidLiquidityResolver.OverallTokenData",
            type: "tuple",
            components: [
              { name: "borrowRate", internalType: "uint256", type: "uint256" },
              { name: "supplyRate", internalType: "uint256", type: "uint256" },
              { name: "fee", internalType: "uint256", type: "uint256" },
              { name: "lastStoredUtilization", internalType: "uint256", type: "uint256" },
              { name: "storageUpdateThreshold", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "supplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "borrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRawInterest", internalType: "uint256", type: "uint256" },
              { name: "supplyInterestFree", internalType: "uint256", type: "uint256" },
              { name: "borrowRawInterest", internalType: "uint256", type: "uint256" },
              { name: "borrowInterestFree", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "revenue", internalType: "uint256", type: "uint256" },
              { name: "maxUtilization", internalType: "uint256", type: "uint256" },
              {
                name: "rateData",
                internalType: "struct IFluidLiquidityResolver.RateData",
                type: "tuple",
                components: [
                  { name: "version", internalType: "uint256", type: "uint256" },
                  {
                    name: "rateDataV1",
                    internalType: "struct IFluidLiquidityResolver.RateDataV1Params",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "kink", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationZero", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationMax", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "rateDataV2",
                    internalType: "struct IFluidLiquidityResolver.RateDataV2Params",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "kink1", internalType: "uint256", type: "uint256" },
                      { name: "kink2", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationZero", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink1", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink2", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationMax", internalType: "uint256", type: "uint256" },
                    ],
                  },
                ],
              },
            ],
          },
          {
            name: "quoteTokenData",
            internalType: "struct IFluidLiquidityResolver.OverallTokenData",
            type: "tuple",
            components: [
              { name: "borrowRate", internalType: "uint256", type: "uint256" },
              { name: "supplyRate", internalType: "uint256", type: "uint256" },
              { name: "fee", internalType: "uint256", type: "uint256" },
              { name: "lastStoredUtilization", internalType: "uint256", type: "uint256" },
              { name: "storageUpdateThreshold", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "supplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "borrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRawInterest", internalType: "uint256", type: "uint256" },
              { name: "supplyInterestFree", internalType: "uint256", type: "uint256" },
              { name: "borrowRawInterest", internalType: "uint256", type: "uint256" },
              { name: "borrowInterestFree", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "revenue", internalType: "uint256", type: "uint256" },
              { name: "maxUtilization", internalType: "uint256", type: "uint256" },
              {
                name: "rateData",
                internalType: "struct IFluidLiquidityResolver.RateData",
                type: "tuple",
                components: [
                  { name: "version", internalType: "uint256", type: "uint256" },
                  {
                    name: "rateDataV1",
                    internalType: "struct IFluidLiquidityResolver.RateDataV1Params",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "kink", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationZero", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationMax", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "rateDataV2",
                    internalType: "struct IFluidLiquidityResolver.RateDataV2Params",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "kink1", internalType: "uint256", type: "uint256" },
                      { name: "kink2", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationZero", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink1", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationKink2", internalType: "uint256", type: "uint256" },
                      { name: "rateAtUtilizationMax", internalType: "uint256", type: "uint256" },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IFluidVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "vaultResolver",
    outputs: [{ name: "", internalType: "contract IFluidVaultResolver", type: "address" }],
    stateMutability: "view",
  },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedAsset" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAaveOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAaveOracleAbi = [
  {
    type: "function",
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [{ name: "", internalType: "contract IPoolAddressesProvider", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "BASE_CURRENCY",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "BASE_CURRENCY_UNIT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getAssetPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" }],
    name: "getAssetsPrices",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getFallbackOracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getSourceOfAsset",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAggregatorV2V3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAggregatorV2V3Abi = [
  {
    type: "function",
    inputs: [],
    name: "aggregator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "description",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_roundId", internalType: "uint256", type: "uint256" }],
    name: "getAnswer",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_roundId", internalType: "uint80", type: "uint80" }],
    name: "getRoundData",
    outputs: [
      { name: "roundId", internalType: "uint80", type: "uint80" },
      { name: "answer", internalType: "int256", type: "int256" },
      { name: "startedAt", internalType: "uint256", type: "uint256" },
      { name: "updatedAt", internalType: "uint256", type: "uint256" },
      { name: "answeredInRound", internalType: "uint80", type: "uint80" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_roundId", internalType: "uint256", type: "uint256" }],
    name: "getTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestAnswer",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestRound",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestRoundData",
    outputs: [
      { name: "roundId", internalType: "uint80", type: "uint80" },
      { name: "answer", internalType: "int256", type: "int256" },
      { name: "startedAt", internalType: "uint256", type: "uint256" },
      { name: "updatedAt", internalType: "uint256", type: "uint256" },
      { name: "answeredInRound", internalType: "uint80", type: "uint80" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "latestTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "current", internalType: "int256", type: "int256", indexed: true },
      { name: "roundId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "updatedAt", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "AnswerUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "roundId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "startedBy", internalType: "address", type: "address", indexed: true },
      { name: "startedAt", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NewRound",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const icTokenAbi = [
  {
    type: "function",
    inputs: [],
    name: "_acceptAdmin",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "addAmount", internalType: "uint256", type: "uint256" }],
    name: "_addReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "reduceAmount", internalType: "uint256", type: "uint256" }],
    name: "_reduceReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newComptroller", internalType: "address", type: "address" }],
    name: "_setComptroller",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "implementation_", internalType: "address", type: "address" },
      { name: "allowResign", internalType: "bool", type: "bool" },
      { name: "becomeImplementationData", internalType: "bytes", type: "bytes" },
    ],
    name: "_setImplementation",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newInterestRateModel", internalType: "address", type: "address" }],
    name: "_setInterestRateModel",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPendingAdmin", internalType: "address", type: "address" }],
    name: "_setPendingAdmin",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newReserveFactorMantissa", internalType: "uint256", type: "uint256" }],
    name: "_setReserveFactor",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "accrualBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "accrueInterest",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "admin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOfUnderlying",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "borrowAmount", internalType: "uint256", type: "uint256" }],
    name: "borrow",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "borrowBalanceCurrent",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "borrowBalanceStored",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "borrowIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "borrowRatePerBlock",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "comptroller",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "delegateToImplementation",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "delegateToViewImplementation",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "exchangeRateCurrent",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "exchangeRateStored",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "getAccountSnapshot",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getCash",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "initialExchangeRateMantissa",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "interestRateModel",
    outputs: [{ name: "", internalType: "contract ILegacyJumpRateModelV2", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "isCToken", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [
      { name: "borrower", internalType: "address", type: "address" },
      { name: "cTokenCollateral", internalType: "contract ICToken", type: "address" },
    ],
    name: "liquidateBorrow",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "borrower", internalType: "address", type: "address" },
      { name: "repayAmount", internalType: "uint256", type: "uint256" },
      { name: "cTokenCollateral", internalType: "contract ICToken", type: "address" },
    ],
    name: "liquidateBorrow",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "mint", outputs: [], stateMutability: "payable" },
  {
    type: "function",
    inputs: [{ name: "mintAmount", internalType: "uint256", type: "uint256" }],
    name: "mint",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "pendingAdmin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "redeemTokens", internalType: "uint256", type: "uint256" }],
    name: "redeem",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "redeemAmount", internalType: "uint256", type: "uint256" }],
    name: "redeemUnderlying",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "repayAmount", internalType: "uint256", type: "uint256" }],
    name: "repayBorrow",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "repayBorrow", outputs: [], stateMutability: "payable" },
  {
    type: "function",
    inputs: [
      { name: "borrower", internalType: "address", type: "address" },
      { name: "repayAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "repayBorrowBehalf",
    outputs: [{ name: "", internalType: "enum Error", type: "uint8" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "borrower", internalType: "address", type: "address" }],
    name: "repayBorrowBehalf",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "reserveFactorMantissa",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "liquidator", internalType: "address", type: "address" },
      { name: "borrower", internalType: "address", type: "address" },
      { name: "seizeTokens", internalType: "uint256", type: "uint256" },
    ],
    name: "seize",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "supplyRatePerBlock",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "sweepToken",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalBorrows",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalBorrowsCurrent",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "totalReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "dst", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "src", internalType: "address", type: "address" },
      { name: "dst", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "underlying",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContango
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContangoAbi = [
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "initiator", internalType: "address", type: "address" },
      { name: "repayTo", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeClose",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amountOwed", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeOpenFromFlashBorrow",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "initiator", internalType: "address", type: "address" },
      { name: "repayTo", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
    ],
    name: "completeOpenFromFlashLoan",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "base", internalType: "contract IERC20Metadata", type: "address" },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "createInstrument",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "donatePosition",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }],
    name: "instrument",
    outputs: [
      {
        name: "",
        internalType: "struct Instrument",
        type: "tuple",
        components: [
          { name: "base", internalType: "contract IERC20Metadata", type: "address" },
          { name: "baseUnit", internalType: "uint256", type: "uint256" },
          { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
          { name: "quoteUnit", internalType: "uint256", type: "uint256" },
          { name: "closingOnly", internalType: "bool", type: "bool" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "PositionId", type: "bytes32" }],
    name: "lastOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "closingOnly", internalType: "bool", type: "bool" },
    ],
    name: "setClosingOnly",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "trade",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "tradeOnBehalfOf",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "closingOnly", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ClosingOnlySet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "base", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address", indexed: false },
    ],
    name: "InstrumentCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: false },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "PositionDonated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "tradedBy", internalType: "address", type: "address", indexed: true },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8", indexed: false },
      { name: "cashflow", internalType: "int256", type: "int256", indexed: false },
      { name: "quantityDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "price", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "feeCcy", internalType: "enum Currency", type: "uint8", indexed: false },
    ],
    name: "PositionUpserted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "RewardsClaimed",
  },
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContangoErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContangoErrorsAbi = [
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContangoEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContangoEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "closingOnly", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ClosingOnlySet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16", indexed: true },
      { name: "base", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address", indexed: false },
    ],
    name: "InstrumentCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: false },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "PositionDonated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "tradedBy", internalType: "address", type: "address", indexed: true },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8", indexed: false },
      { name: "cashflow", internalType: "int256", type: "int256", indexed: false },
      { name: "quantityDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "price", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "feeCcy", internalType: "enum Currency", type: "uint8", indexed: false },
    ],
    name: "PositionUpserted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "RewardsClaimed",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IContangoLens
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iContangoLensAbi = [
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balancesUSD_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "leverage",
    outputs: [{ name: "leverage_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "metaData",
    outputs: [
      {
        name: "metaData_",
        internalType: "struct ContangoLens.MetaData",
        type: "tuple",
        components: [
          {
            name: "instrument",
            internalType: "struct Instrument",
            type: "tuple",
            components: [
              { name: "base", internalType: "contract IERC20Metadata", type: "address" },
              { name: "baseUnit", internalType: "uint256", type: "uint256" },
              { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
              { name: "quoteUnit", internalType: "uint256", type: "uint256" },
              { name: "closingOnly", internalType: "bool", type: "bool" },
            ],
          },
          {
            name: "balances",
            internalType: "struct Balances",
            type: "tuple",
            components: [
              { name: "collateral", internalType: "uint256", type: "uint256" },
              { name: "debt", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "balancesUSD",
            internalType: "struct Balances",
            type: "tuple",
            components: [
              { name: "collateral", internalType: "uint256", type: "uint256" },
              { name: "debt", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "prices",
            internalType: "struct Prices",
            type: "tuple",
            components: [
              { name: "collateral", internalType: "uint256", type: "uint256" },
              { name: "debt", internalType: "uint256", type: "uint256" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "pricesUSD",
            internalType: "struct Prices",
            type: "tuple",
            components: [
              { name: "collateral", internalType: "uint256", type: "uint256" },
              { name: "debt", internalType: "uint256", type: "uint256" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "ltv", internalType: "uint256", type: "uint256" },
          { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
          {
            name: "rates",
            internalType: "struct ContangoLens.BorrowingLending",
            type: "tuple",
            components: [
              { name: "borrowing", internalType: "uint256", type: "uint256" },
              { name: "lending", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidity",
            internalType: "struct ContangoLens.BorrowingLending",
            type: "tuple",
            components: [
              { name: "borrowing", internalType: "uint256", type: "uint256" },
              { name: "lending", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "borrowingRewards",
            internalType: "struct Reward[]",
            type: "tuple[]",
            components: [
              {
                name: "token",
                internalType: "struct TokenData",
                type: "tuple",
                components: [
                  { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "symbol", internalType: "string", type: "string" },
                  { name: "decimals", internalType: "uint8", type: "uint8" },
                  { name: "unit", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "rate", internalType: "uint256", type: "uint256" },
              { name: "claimable", internalType: "uint256", type: "uint256" },
              { name: "usdPrice", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "lendingRewards",
            internalType: "struct Reward[]",
            type: "tuple[]",
            components: [
              {
                name: "token",
                internalType: "struct TokenData",
                type: "tuple",
                components: [
                  { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "name", internalType: "string", type: "string" },
                  { name: "symbol", internalType: "string", type: "string" },
                  { name: "decimals", internalType: "uint8", type: "uint8" },
                  { name: "unit", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "rate", internalType: "uint256", type: "uint256" },
              { name: "claimable", internalType: "uint256", type: "uint256" },
              { name: "usdPrice", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "irmRaw", internalType: "bytes", type: "bytes" },
          { name: "availableActions", internalType: "enum AvailableActions[]", type: "uint8[]" },
          {
            name: "limits",
            internalType: "struct Limits",
            type: "tuple",
            components: [
              { name: "minBorrowing", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
              { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
              { name: "minLending", internalType: "uint256", type: "uint256" },
              { name: "maxLending", internalType: "uint256", type: "uint256" },
              { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "supportsFlashBorrow", internalType: "bool", type: "bool" },
          {
            name: "baseToken",
            internalType: "struct ContangoLens.TokenMetadata",
            type: "tuple",
            components: [
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "quoteToken",
            internalType: "struct ContangoLens.TokenMetadata",
            type: "tuple",
            components: [
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "mmId", internalType: "MoneyMarketId", type: "uint8" }],
    name: "moneyMarketViews",
    outputs: [{ name: "", internalType: "contract IMoneyMarketView", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "netRate",
    outputs: [{ name: "netRate_", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "address", type: "address" },
    ],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "mmId", internalType: "MoneyMarketId", type: "uint8" },
      { name: "asset", internalType: "address", type: "address" },
    ],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "mmId", internalType: "MoneyMarketId", type: "uint8" },
      { name: "asset", internalType: "address", type: "address" },
    ],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "address", type: "address" },
    ],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "immv", internalType: "contract IMoneyMarketView", type: "address" }],
    name: "setMoneyMarketView",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "error",
    inputs: [
      { name: "target", internalType: "address", type: "address" },
      { name: "selector", internalType: "bytes4", type: "bytes4" },
    ],
    name: "CallFailed",
  },
  { type: "error", inputs: [{ name: "mm", internalType: "MoneyMarketId", type: "uint8" }], name: "InvalidMoneyMarket" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDolomiteMargin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDolomiteMarginAbi = [
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountBalances",
    outputs: [
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "address[]", type: "address[]" },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Par[]",
        type: "tuple[]",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint128", type: "uint128" },
        ],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Wei[]",
        type: "tuple[]",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getAccountMarketWithBalanceAtIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountMarketsWithBalances",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getAccountMaxNumberOfMarketsWithBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountNumberOfMarketsWithBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountNumberOfMarketsWithDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "marketId", internalType: "uint256", type: "uint256" },
    ],
    name: "getAccountPar",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Par",
        type: "tuple",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint128", type: "uint128" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "marketId", internalType: "uint256", type: "uint256" },
    ],
    name: "getAccountParNoMarketCheck",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Par",
        type: "tuple",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint128", type: "uint128" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountStatus",
    outputs: [{ name: "", internalType: "IDolomiteMargin.Status", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAccountValues",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "marketId", internalType: "uint256", type: "uint256" },
    ],
    name: "getAccountWei",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Wei",
        type: "tuple",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "account",
        internalType: "struct IDolomiteMargin.Info",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "getAdjustedAccountValues",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getEarningsRate",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "autoTrader", internalType: "address", type: "address" }],
    name: "getIsAutoTraderSpecial",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "operator", internalType: "address", type: "address" }],
    name: "getIsGlobalOperator",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "getIsLocalOperator",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getLiquidationSpread",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "heldMarketId", internalType: "uint256", type: "uint256" },
      { name: "owedMarketId", internalType: "uint256", type: "uint256" },
    ],
    name: "getLiquidationSpreadForPair",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getMarginRatio",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarket",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Market",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "isClosing", internalType: "bool", type: "bool" },
          { name: "isRecyclable", internalType: "bool", type: "bool" },
          {
            name: "totalPar",
            internalType: "struct IDolomiteMargin.TotalPar",
            type: "tuple",
            components: [
              { name: "borrow", internalType: "uint128", type: "uint128" },
              { name: "supply", internalType: "uint128", type: "uint128" },
            ],
          },
          {
            name: "index",
            internalType: "struct IDolomiteMargin.Index",
            type: "tuple",
            components: [
              { name: "borrow", internalType: "uint96", type: "uint96" },
              { name: "supply", internalType: "uint96", type: "uint96" },
              { name: "lastUpdate", internalType: "uint32", type: "uint32" },
            ],
          },
          { name: "priceOracle", internalType: "address", type: "address" },
          { name: "interestSetter", internalType: "address", type: "address" },
          {
            name: "marginPremium",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "spreadPremium",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "maxWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketCachedIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Index",
        type: "tuple",
        components: [
          { name: "borrow", internalType: "uint96", type: "uint96" },
          { name: "supply", internalType: "uint96", type: "uint96" },
          { name: "lastUpdate", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketCurrentIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Index",
        type: "tuple",
        components: [
          { name: "borrow", internalType: "uint96", type: "uint96" },
          { name: "supply", internalType: "uint96", type: "uint96" },
          { name: "lastUpdate", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getMarketIdByTokenAddress",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketInterestRate",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Rate",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketInterestSetter",
    outputs: [{ name: "", internalType: "contract ILinearStepFunctionInterestSetter", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketIsClosing",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketIsRecyclable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketMarginPremium",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketMaxWei",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Wei",
        type: "tuple",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketPrice",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Price",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketPriceOracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketSpreadPremium",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketTokenAddress",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketTotalPar",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.TotalPar",
        type: "tuple",
        components: [
          { name: "borrow", internalType: "uint128", type: "uint128" },
          { name: "supply", internalType: "uint128", type: "uint128" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getMarketWithInfo",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Market",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "isClosing", internalType: "bool", type: "bool" },
          { name: "isRecyclable", internalType: "bool", type: "bool" },
          {
            name: "totalPar",
            internalType: "struct IDolomiteMargin.TotalPar",
            type: "tuple",
            components: [
              { name: "borrow", internalType: "uint128", type: "uint128" },
              { name: "supply", internalType: "uint128", type: "uint128" },
            ],
          },
          {
            name: "index",
            internalType: "struct IDolomiteMargin.Index",
            type: "tuple",
            components: [
              { name: "borrow", internalType: "uint96", type: "uint96" },
              { name: "supply", internalType: "uint96", type: "uint96" },
              { name: "lastUpdate", internalType: "uint32", type: "uint32" },
            ],
          },
          { name: "priceOracle", internalType: "address", type: "address" },
          { name: "interestSetter", internalType: "address", type: "address" },
          {
            name: "marginPremium",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "spreadPremium",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "maxWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Index",
        type: "tuple",
        components: [
          { name: "borrow", internalType: "uint96", type: "uint96" },
          { name: "supply", internalType: "uint96", type: "uint96" },
          { name: "lastUpdate", internalType: "uint32", type: "uint32" },
        ],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Price",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
      {
        name: "",
        internalType: "struct IDolomiteMargin.Rate",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getMinBorrowedValue",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "uint256", type: "uint256" }],
    name: "getNumExcessTokens",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.Wei",
        type: "tuple",
        components: [
          { name: "sign", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getNumMarkets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "n", internalType: "uint256", type: "uint256" }],
    name: "getRecyclableMarkets",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getRiskLimits",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.RiskLimits",
        type: "tuple",
        components: [
          { name: "marginRatioMax", internalType: "uint64", type: "uint64" },
          { name: "liquidationSpreadMax", internalType: "uint64", type: "uint64" },
          { name: "earningsRateMax", internalType: "uint64", type: "uint64" },
          { name: "marginPremiumMax", internalType: "uint64", type: "uint64" },
          { name: "spreadPremiumMax", internalType: "uint64", type: "uint64" },
          { name: "minBorrowedValueMax", internalType: "uint128", type: "uint128" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getRiskParams",
    outputs: [
      {
        name: "",
        internalType: "struct IDolomiteMargin.RiskParams",
        type: "tuple",
        components: [
          {
            name: "marginRatio",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "liquidationSpread",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "earningsRate",
            internalType: "struct IDolomiteMargin.D256",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          {
            name: "minBorrowedValue",
            internalType: "struct IDolomiteMargin.Value",
            type: "tuple",
            components: [{ name: "value", internalType: "uint256", type: "uint256" }],
          },
          { name: "accountMaxNumberOfMarketsWithBalances", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "isOwner", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [
      {
        name: "accounts",
        internalType: "struct IDolomiteMargin.Info[]",
        type: "tuple[]",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "number", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "actions",
        internalType: "struct IDolomiteMargin.ActionArgs[]",
        type: "tuple[]",
        components: [
          { name: "actionType", internalType: "enum IDolomiteMargin.ActionType", type: "uint8" },
          { name: "accountId", internalType: "uint256", type: "uint256" },
          {
            name: "amount",
            internalType: "struct IDolomiteMargin.AssetAmount",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "denomination", internalType: "enum IDolomiteMargin.AssetDenomination", type: "uint8" },
              { name: "ref", internalType: "enum IDolomiteMargin.AssetReference", type: "uint8" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "primaryMarketId", internalType: "uint256", type: "uint256" },
          { name: "secondaryMarketId", internalType: "uint256", type: "uint256" },
          { name: "otherAddress", internalType: "address", type: "address" },
          { name: "otherAccountId", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "operate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "priceOracle", internalType: "address", type: "address" },
      { name: "interestSetter", internalType: "address", type: "address" },
      {
        name: "marginPremium",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
      {
        name: "spreadPremium",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
      { name: "maxWei", internalType: "uint256", type: "uint256" },
      { name: "isClosing", internalType: "bool", type: "bool" },
      { name: "isRecyclable", internalType: "bool", type: "bool" },
    ],
    name: "ownerAddMarket",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "salvager", internalType: "address", type: "address" },
    ],
    name: "ownerRemoveMarkets",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "accountMaxNumberOfMarketsWithBalances", internalType: "uint256", type: "uint256" }],
    name: "ownerSetAccountMaxNumberOfMarketsWithBalances",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "autoTrader", internalType: "address", type: "address" },
      { name: "special", internalType: "bool", type: "bool" },
    ],
    name: "ownerSetAutoTraderSpecial",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "earningsRate",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetEarningsRate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "ownerSetGlobalOperator",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      { name: "interestSetter", internalType: "address", type: "address" },
    ],
    name: "ownerSetInterestSetter",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      { name: "isClosing", internalType: "bool", type: "bool" },
    ],
    name: "ownerSetIsClosing",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "spread",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetLiquidationSpread",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      {
        name: "marginPremium",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetMarginPremium",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "ratio",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetMarginRatio",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      { name: "maxWei", internalType: "uint256", type: "uint256" },
    ],
    name: "ownerSetMaxWei",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "minBorrowedValue",
        internalType: "struct IDolomiteMargin.Value",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetMinBorrowedValue",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      { name: "priceOracle", internalType: "address", type: "address" },
    ],
    name: "ownerSetPriceOracle",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      {
        name: "spreadPremium",
        internalType: "struct IDolomiteMargin.D256",
        type: "tuple",
        components: [{ name: "value", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "ownerSetSpreadPremium",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "marketId", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" },
    ],
    name: "ownerWithdrawExcessTokens",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
    ],
    name: "ownerWithdrawUnsupportedTokens",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      {
        name: "args",
        internalType: "struct IDolomiteMargin.OperatorArg[]",
        type: "tuple[]",
        components: [
          { name: "operator", internalType: "address", type: "address" },
          { name: "trusted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setOperators",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataAbi = [
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitAbi = [
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC7399
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc7399Abi = [
  {
    type: "function",
    inputs: [
      { name: "loanReceiver", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      {
        name: "callback",
        internalType: "function (address,address,address,uint256,uint256,bytes) external returns (bytes)",
        type: "function",
      },
    ],
    name: "flash",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "flashFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "maxFlashLoan",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEulerPriceOracle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEulerPriceOracleAbi = [
  {
    type: "function",
    inputs: [
      { name: "inAmount", internalType: "uint256", type: "uint256" },
      { name: "base", internalType: "contract IERC20Metadata", type: "address" },
      { name: "quote", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getQuote",
    outputs: [{ name: "outAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEulerVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEulerVaultAbi = [
  {
    type: "function",
    inputs: [{ name: "collateral", internalType: "contract IEulerVault", type: "address" }],
    name: "LTVFull",
    outputs: [
      { name: "borrowLTV", internalType: "uint256", type: "uint256" },
      { name: "liquidationLTV", internalType: "uint256", type: "uint256" },
      { name: "initialLiquidationLTV", internalType: "uint256", type: "uint256" },
      { name: "targetTimestamp", internalType: "uint256", type: "uint256" },
      { name: "rampDuration", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "LTVList",
    outputs: [{ name: "", internalType: "contract IEulerVault[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "asset",
    outputs: [{ name: "assetTokenAddress", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "caps",
    outputs: [
      { name: "supplyCap", internalType: "AmountCap", type: "uint16" },
      { name: "borrowCap", internalType: "AmountCap", type: "uint16" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "cash",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "liquidator", internalType: "address", type: "address" },
      { name: "violator", internalType: "address", type: "address" },
      { name: "collateral", internalType: "contract IEulerVault", type: "address" },
    ],
    name: "checkLiquidation",
    outputs: [
      { name: "maxRepay", internalType: "uint256", type: "uint256" },
      { name: "maxYield", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "convertToAssets",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "convertToShares",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "debtOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "deposit",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "enableBalanceForwarder", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "interestFee",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "interestRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "interestRateModel",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "violator", internalType: "address", type: "address" },
      { name: "collateral", internalType: "contract IEulerVault", type: "address" },
      { name: "repayAssets", internalType: "uint256", type: "uint256" },
      { name: "minYieldBalance", internalType: "uint256", type: "uint256" },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "liquidationCoolOffTime",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "maxDeposit",
    outputs: [{ name: "maxAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "maxMint",
    outputs: [{ name: "maxShares", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxRedeem",
    outputs: [{ name: "maxShares", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxWithdraw",
    outputs: [{ name: "maxAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "oracle",
    outputs: [{ name: "", internalType: "contract IEulerPriceOracle", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewDeposit",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewMint",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewRedeem",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewWithdraw",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "redeem",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "repay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalAssets",
    outputs: [{ name: "totalManagedAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalBorrows",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "unitOfAccount",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "sender", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "sender", internalType: "address", type: "address", indexed: true },
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdraw",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IExactlyMarket
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iExactlyMarketAbi = [
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "accountSnapshot",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "accounts",
    outputs: [
      { name: "fixedDeposits", internalType: "uint256", type: "uint256" },
      { name: "fixedBorrows", internalType: "uint256", type: "uint256" },
      { name: "floatingBorrowShares", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "asset",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "auditor",
    outputs: [{ name: "", internalType: "contract IAuditor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "backupFeeRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [{ name: "borrowShares", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "maxAssets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "borrowAtMaturity",
    outputs: [{ name: "assetsOwed", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "borrower", internalType: "address", type: "address" }],
    name: "clearBadDebt",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "convertToAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "convertToShares",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "dampSpeedDown",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "dampSpeedUp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "deposit",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "minAssetsRequired", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "depositAtMaturity",
    outputs: [{ name: "positionAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "earningsAccumulator",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "earningsAccumulatorSmoothFactor",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "fixedBorrowPositions",
    outputs: [
      { name: "principal", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "fixedDepositPositions",
    outputs: [
      { name: "principal", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "maturity", internalType: "uint256", type: "uint256" }],
    name: "fixedPoolBalance",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "maturity", internalType: "uint256", type: "uint256" }],
    name: "fixedPoolBorrowed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "fixedPools",
    outputs: [
      { name: "borrowed", internalType: "uint256", type: "uint256" },
      { name: "supplied", internalType: "uint256", type: "uint256" },
      { name: "unassignedEarnings", internalType: "uint256", type: "uint256" },
      { name: "lastAccrual", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "floatingAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "floatingAssetsAverage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "floatingBackupBorrowed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "floatingDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "maxFuturePools_", internalType: "uint8", type: "uint8" },
      { name: "earningsAccumulatorSmoothFactor_", internalType: "uint128", type: "uint128" },
      { name: "interestRateModel_", internalType: "address", type: "address" },
      { name: "penaltyRate_", internalType: "uint256", type: "uint256" },
      { name: "backupFeeRate_", internalType: "uint256", type: "uint256" },
      { name: "reserveFactor_", internalType: "uint128", type: "uint128" },
      { name: "dampSpeedUp_", internalType: "uint256", type: "uint256" },
      { name: "dampSpeedDown_", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "interestRateModel",
    outputs: [{ name: "", internalType: "contract IInterestRateModel", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "lastAccumulatorAccrual",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "lastAverageUpdate",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "lastFloatingDebtUpdate",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "borrower", internalType: "address", type: "address" },
      { name: "maxAssets", internalType: "uint256", type: "uint256" },
      { name: "seizeMarket", internalType: "address", type: "address" },
    ],
    name: "liquidate",
    outputs: [{ name: "repaidAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "maxFuturePools",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "penaltyRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewBorrow",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "borrower", internalType: "address", type: "address" }],
    name: "previewDebt",
    outputs: [{ name: "debt", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "previewFloatingAssetsAverage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewRefund",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewRepay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "redeem",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "borrowShares", internalType: "uint256", type: "uint256" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "refund",
    outputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "actualShares", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "repay",
    outputs: [
      { name: "actualRepay", internalType: "uint256", type: "uint256" },
      { name: "borrowShares", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "positionAssets", internalType: "uint256", type: "uint256" },
      { name: "maxAssets", internalType: "uint256", type: "uint256" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "repayAtMaturity",
    outputs: [{ name: "actualRepayAssets", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "reserveFactor",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardsController",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "liquidator", internalType: "address", type: "address" },
      { name: "borrower", internalType: "address", type: "address" },
      { name: "assets", internalType: "uint256", type: "uint256" },
    ],
    name: "seize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "backupFeeRate_", internalType: "uint256", type: "uint256" }],
    name: "setBackupFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "up", internalType: "uint256", type: "uint256" },
      { name: "down", internalType: "uint256", type: "uint256" },
    ],
    name: "setDampSpeed",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "earningsAccumulatorSmoothFactor_", internalType: "uint128", type: "uint128" }],
    name: "setEarningsAccumulatorSmoothFactor",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interestRateModel_", internalType: "address", type: "address" }],
    name: "setInterestRateModel",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "futurePools", internalType: "uint8", type: "uint8" }],
    name: "setMaxFuturePools",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "penaltyRate_", internalType: "uint256", type: "uint256" }],
    name: "setPenaltyRate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "reserveFactor_", internalType: "uint128", type: "uint128" }],
    name: "setReserveFactor",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "rewardsController_", internalType: "address", type: "address" }],
    name: "setRewardsController",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "treasury_", internalType: "address", type: "address" },
      { name: "treasuryFeeRate_", internalType: "uint256", type: "uint256" },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalFloatingBorrowAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalFloatingBorrowShares",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "shares", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "shares", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "treasuryFeeRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "positionAssets", internalType: "uint256", type: "uint256" },
      { name: "minAssetsRequired", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "withdrawAtMaturity",
    outputs: [{ name: "assetsDiscounted", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "timestamp", internalType: "uint256", type: "uint256", indexed: false }],
    name: "AccumulatorAccrual",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "backupFeeRate", internalType: "uint256", type: "uint256", indexed: false }],
    name: "BackupFeeRateSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Borrow",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256", indexed: true },
      { name: "caller", internalType: "address", type: "address", indexed: false },
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BorrowAtMaturity",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "dampSpeedUp", internalType: "uint256", type: "uint256", indexed: false },
      { name: "dampSpeedDown", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "DampSpeedSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256", indexed: true },
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "DepositAtMaturity",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "earningsAccumulatorSmoothFactor", internalType: "uint256", type: "uint256", indexed: false }],
    name: "EarningsAccumulatorSmoothFactorSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256", indexed: false },
      { name: "maturity", internalType: "uint256", type: "uint256", indexed: true },
      { name: "unassignedEarnings", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "FixedEarningsUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256", indexed: false },
      { name: "utilization", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "FloatingDebtUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "interestRateModel", internalType: "address", type: "address", indexed: true }],
    name: "InterestRateModelSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "lendersAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "seizeMarket", internalType: "address", type: "address", indexed: true },
      { name: "seizedAssets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Liquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256", indexed: false },
      { name: "floatingDepositShares", internalType: "uint256", type: "uint256", indexed: false },
      { name: "floatingAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "floatingBorrowShares", internalType: "uint256", type: "uint256", indexed: false },
      { name: "floatingDebt", internalType: "uint256", type: "uint256", indexed: false },
      { name: "earningsAccumulator", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "MarketUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "maxFuturePools", internalType: "uint256", type: "uint256", indexed: false }],
    name: "MaxFuturePoolsSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "penaltyRate", internalType: "uint256", type: "uint256", indexed: false }],
    name: "PenaltyRateSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Repay",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256", indexed: true },
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "positionAssets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "RepayAtMaturity",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "reserveFactor", internalType: "uint256", type: "uint256", indexed: false }],
    name: "ReserveFactorSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "rewardsController", internalType: "address", type: "address", indexed: true }],
    name: "RewardsControllerSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "liquidator", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Seize",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SpreadBadDebt",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "treasury", internalType: "address", type: "address", indexed: true },
      { name: "treasuryFeeRate", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "TreasurySet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Unpaused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdraw",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "maturity", internalType: "uint256", type: "uint256", indexed: true },
      { name: "caller", internalType: "address", type: "address", indexed: false },
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "positionAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "WithdrawAtMaturity",
  },
  { type: "error", inputs: [], name: "Disagreement" },
  { type: "error", inputs: [], name: "InsufficientProtocolLiquidity" },
  { type: "error", inputs: [], name: "MaturityOverflow" },
  { type: "error", inputs: [], name: "NotAuditor" },
  { type: "error", inputs: [], name: "SelfLiquidation" },
  {
    type: "error",
    inputs: [
      { name: "", internalType: "uint8", type: "uint8" },
      { name: "", internalType: "uint8", type: "uint8" },
    ],
    name: "UnmatchedPoolState",
  },
  {
    type: "error",
    inputs: [
      { name: "", internalType: "uint8", type: "uint8" },
      { name: "", internalType: "uint8", type: "uint8" },
      { name: "", internalType: "uint8", type: "uint8" },
    ],
    name: "UnmatchedPoolStates",
  },
  { type: "error", inputs: [], name: "ZeroBorrow" },
  { type: "error", inputs: [], name: "ZeroDeposit" },
  { type: "error", inputs: [], name: "ZeroRepay" },
  { type: "error", inputs: [], name: "ZeroWithdraw" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IExactlyPreviewer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iExactlyPreviewerAbi = [
  {
    type: "function",
    inputs: [],
    name: "auditor",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "basePriceFeed",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "exactly",
    outputs: [
      {
        name: "data",
        internalType: "struct IExactlyPreviewer.MarketAccount[]",
        type: "tuple[]",
        components: [
          { name: "market", internalType: "address", type: "address" },
          { name: "symbol", internalType: "string", type: "string" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "asset", internalType: "address", type: "address" },
          { name: "assetName", internalType: "string", type: "string" },
          { name: "assetSymbol", internalType: "string", type: "string" },
          {
            name: "interestRateModel",
            internalType: "struct IExactlyPreviewer.InterestRateModel",
            type: "tuple",
            components: [
              { name: "id", internalType: "address", type: "address" },
              { name: "fixedCurveA", internalType: "uint256", type: "uint256" },
              { name: "fixedCurveB", internalType: "int256", type: "int256" },
              { name: "fixedMaxUtilization", internalType: "uint256", type: "uint256" },
              { name: "floatingCurveA", internalType: "uint256", type: "uint256" },
              { name: "floatingCurveB", internalType: "int256", type: "int256" },
              { name: "floatingMaxUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
          { name: "penaltyRate", internalType: "uint256", type: "uint256" },
          { name: "adjustFactor", internalType: "uint256", type: "uint256" },
          { name: "maxFuturePools", internalType: "uint8", type: "uint8" },
          {
            name: "fixedPools",
            internalType: "struct IExactlyPreviewer.FixedPool[]",
            type: "tuple[]",
            components: [
              { name: "maturity", internalType: "uint256", type: "uint256" },
              { name: "borrowed", internalType: "uint256", type: "uint256" },
              { name: "supplied", internalType: "uint256", type: "uint256" },
              { name: "available", internalType: "uint256", type: "uint256" },
              { name: "utilization", internalType: "uint256", type: "uint256" },
              { name: "depositRate", internalType: "uint256", type: "uint256" },
              { name: "minBorrowRate", internalType: "uint256", type: "uint256" },
              { name: "optimalDeposit", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "rewardRates",
            internalType: "struct IExactlyPreviewer.RewardRate[]",
            type: "tuple[]",
            components: [
              { name: "asset", internalType: "address", type: "address" },
              { name: "assetName", internalType: "string", type: "string" },
              { name: "assetSymbol", internalType: "string", type: "string" },
              { name: "usdPrice", internalType: "uint256", type: "uint256" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "floatingDeposit", internalType: "uint256", type: "uint256" },
              { name: "maturities", internalType: "uint256[]", type: "uint256[]" },
            ],
          },
          { name: "floatingBorrowRate", internalType: "uint256", type: "uint256" },
          { name: "floatingUtilization", internalType: "uint256", type: "uint256" },
          { name: "floatingBackupBorrowed", internalType: "uint256", type: "uint256" },
          { name: "floatingAvailableAssets", internalType: "uint256", type: "uint256" },
          { name: "totalFloatingBorrowAssets", internalType: "uint256", type: "uint256" },
          { name: "totalFloatingDepositAssets", internalType: "uint256", type: "uint256" },
          { name: "totalFloatingBorrowShares", internalType: "uint256", type: "uint256" },
          { name: "totalFloatingDepositShares", internalType: "uint256", type: "uint256" },
          { name: "isCollateral", internalType: "bool", type: "bool" },
          { name: "maxBorrowAssets", internalType: "uint256", type: "uint256" },
          { name: "floatingBorrowShares", internalType: "uint256", type: "uint256" },
          { name: "floatingBorrowAssets", internalType: "uint256", type: "uint256" },
          { name: "floatingDepositShares", internalType: "uint256", type: "uint256" },
          { name: "floatingDepositAssets", internalType: "uint256", type: "uint256" },
          {
            name: "fixedDepositPositions",
            internalType: "struct IExactlyPreviewer.FixedPosition[]",
            type: "tuple[]",
            components: [
              { name: "maturity", internalType: "uint256", type: "uint256" },
              { name: "previewValue", internalType: "uint256", type: "uint256" },
              {
                name: "position",
                internalType: "struct IExactlyPreviewer.Position",
                type: "tuple",
                components: [
                  { name: "principal", internalType: "uint256", type: "uint256" },
                  { name: "fee", internalType: "uint256", type: "uint256" },
                ],
              },
            ],
          },
          {
            name: "fixedBorrowPositions",
            internalType: "struct IExactlyPreviewer.FixedPosition[]",
            type: "tuple[]",
            components: [
              { name: "maturity", internalType: "uint256", type: "uint256" },
              { name: "previewValue", internalType: "uint256", type: "uint256" },
              {
                name: "position",
                internalType: "struct IExactlyPreviewer.Position",
                type: "tuple",
                components: [
                  { name: "principal", internalType: "uint256", type: "uint256" },
                  { name: "fee", internalType: "uint256", type: "uint256" },
                ],
              },
            ],
          },
          {
            name: "claimableRewards",
            internalType: "struct IExactlyPreviewer.ClaimableReward[]",
            type: "tuple[]",
            components: [
              { name: "asset", internalType: "address", type: "address" },
              { name: "assetName", internalType: "string", type: "string" },
              { name: "assetSymbol", internalType: "string", type: "string" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "assets", internalType: "uint256", type: "uint256" },
    ],
    name: "previewBorrowAtAllMaturities",
    outputs: [
      {
        name: "previews",
        internalType: "struct IExactlyPreviewer.FixedPreview[]",
        type: "tuple[]",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "assets", internalType: "uint256", type: "uint256" },
    ],
    name: "previewBorrowAtMaturity",
    outputs: [
      {
        name: "",
        internalType: "struct IExactlyPreviewer.FixedPreview",
        type: "tuple",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "assets", internalType: "uint256", type: "uint256" },
    ],
    name: "previewDepositAtAllMaturities",
    outputs: [
      {
        name: "previews",
        internalType: "struct IExactlyPreviewer.FixedPreview[]",
        type: "tuple[]",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "assets", internalType: "uint256", type: "uint256" },
    ],
    name: "previewDepositAtMaturity",
    outputs: [
      {
        name: "",
        internalType: "struct IExactlyPreviewer.FixedPreview",
        type: "tuple",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "positionAssets", internalType: "uint256", type: "uint256" },
      { name: "borrower", internalType: "address", type: "address" },
    ],
    name: "previewRepayAtMaturity",
    outputs: [
      {
        name: "",
        internalType: "struct IExactlyPreviewer.FixedPreview",
        type: "tuple",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "market", internalType: "address", type: "address" },
      { name: "maturity", internalType: "uint256", type: "uint256" },
      { name: "positionAssets", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "previewWithdrawAtMaturity",
    outputs: [
      {
        name: "",
        internalType: "struct IExactlyPreviewer.FixedPreview",
        type: "tuple",
        components: [
          { name: "maturity", internalType: "uint256", type: "uint256" },
          { name: "assets", internalType: "uint256", type: "uint256" },
          { name: "utilization", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlashBorrowProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlashBorrowProviderAbi = [
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "callback", internalType: "function (contract IERC20Metadata,uint256,bytes) external returns (bytes)", type: "function" },
    ],
    name: "flashBorrow",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  { type: "error", inputs: [], name: "InvalidSenderOrInitiator" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFluidVaultResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFluidVaultResolverAbi = [
  {
    type: "function",
    inputs: [],
    name: "FACTORY",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "LIQUIDITY",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "LIQUIDITY_RESOLVER",
    outputs: [{ name: "", internalType: "contract IFluidLiquidityResolver", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "slot_", internalType: "uint256", type: "uint256" },
      { name: "key1_", internalType: "int256", type: "int256" },
      { name: "key2_", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateDoubleIntUintMapping",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "slot_", internalType: "uint256", type: "uint256" },
      { name: "key_", internalType: "int256", type: "int256" },
    ],
    name: "calculateStorageSlotIntMapping",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "slot_", internalType: "uint256", type: "uint256" },
      { name: "key_", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateStorageSlotUintMapping",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getAbsorbedLiquidityRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getAllVaultsAddresses",
    outputs: [{ name: "vaults_", internalType: "contract IFluidVault[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getAllVaultsLiquidation",
    outputs: [
      {
        name: "liquidationsData_",
        internalType: "struct IFluidVaultResolver.LiquidationStruct[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenInAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenInAmtTwo", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtTwo", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "branch_", internalType: "uint256", type: "uint256" },
    ],
    name: "getBranchDataRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vaults_", internalType: "address[]", type: "address[]" },
      { name: "tokensInAmt_", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "getMultipleVaultsLiquidation",
    outputs: [
      {
        name: "liquidationsData_",
        internalType: "struct IFluidVaultResolver.LiquidationStruct[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenInAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenInAmtTwo", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtTwo", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "positionId_", internalType: "uint256", type: "uint256" },
    ],
    name: "getPositionDataRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getRateRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getRebalancer",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "tick_", internalType: "int256", type: "int256" },
    ],
    name: "getTickDataRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "key_", internalType: "int256", type: "int256" },
    ],
    name: "getTickHasDebtRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "tick_", internalType: "int256", type: "int256" },
      { name: "id_", internalType: "uint256", type: "uint256" },
    ],
    name: "getTickIdDataRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "nftId_", internalType: "uint256", type: "uint256" }],
    name: "getTokenConfig",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getTotalVaults",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultAbsorb",
    outputs: [
      {
        name: "absorbData_",
        internalType: "struct IFluidVaultResolver.AbsorbStruct",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "absorbAvailable", internalType: "bool", type: "bool" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "vaultId_", internalType: "uint256", type: "uint256" }],
    name: "getVaultAddress",
    outputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultEntireData",
    outputs: [
      {
        name: "vaultData_",
        internalType: "struct IFluidVaultResolver.VaultEntireData",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          {
            name: "constantVariables",
            internalType: "struct IFluidVaultResolver.ConstantViews",
            type: "tuple",
            components: [
              { name: "liquidity", internalType: "address", type: "address" },
              { name: "factory", internalType: "address", type: "address" },
              { name: "adminImplementation", internalType: "address", type: "address" },
              { name: "secondaryImplementation", internalType: "address", type: "address" },
              { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
              { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
              { name: "vaultId", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
            ],
          },
          {
            name: "configs",
            internalType: "struct IFluidVaultResolver.Configs",
            type: "tuple",
            components: [
              { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "collateralFactor", internalType: "uint16", type: "uint16" },
              { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
              { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
              { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
              { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
              { name: "borrowFee", internalType: "uint16", type: "uint16" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
              { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
              { name: "rebalancer", internalType: "address", type: "address" },
            ],
          },
          {
            name: "exchangePricesAndRates",
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            type: "tuple",
            components: [
              { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
              { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
              { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "rewardsRate", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "totalSupplyAndBorrow",
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            type: "tuple",
            components: [
              { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
              { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
              { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
              { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "limitsAndAvailability",
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            type: "tuple",
            components: [
              { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
              { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "vaultState",
            internalType: "struct IFluidVaultResolver.VaultState",
            type: "tuple",
            components: [
              { name: "totalPositions", internalType: "uint256", type: "uint256" },
              { name: "topTick", internalType: "int256", type: "int256" },
              { name: "currentBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              {
                name: "currentBranchState",
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                type: "tuple",
                components: [
                  { name: "status", internalType: "uint256", type: "uint256" },
                  { name: "minimaTick", internalType: "int256", type: "int256" },
                  { name: "debtFactor", internalType: "uint256", type: "uint256" },
                  { name: "partials", internalType: "uint256", type: "uint256" },
                  { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                ],
              },
            ],
          },
          {
            name: "liquidityUserSupplyData",
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "supply", internalType: "uint256", type: "uint256" },
              { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidityUserBorrowData",
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultId",
    outputs: [{ name: "id_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "vault_", internalType: "contract IFluidVault", type: "address" },
      { name: "tokenInAmt_", internalType: "uint256", type: "uint256" },
    ],
    name: "getVaultLiquidation",
    outputs: [
      {
        name: "liquidationData_",
        internalType: "struct IFluidVaultResolver.LiquidationStruct",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address" },
          { name: "tokenInAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtOne", internalType: "uint256", type: "uint256" },
          { name: "tokenInAmtTwo", internalType: "uint256", type: "uint256" },
          { name: "tokenOutAmtTwo", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultState",
    outputs: [
      {
        name: "vaultState_",
        internalType: "struct IFluidVaultResolver.VaultState",
        type: "tuple",
        components: [
          { name: "totalPositions", internalType: "uint256", type: "uint256" },
          { name: "topTick", internalType: "int256", type: "int256" },
          { name: "currentBranch", internalType: "uint256", type: "uint256" },
          { name: "totalBranch", internalType: "uint256", type: "uint256" },
          { name: "totalBorrow", internalType: "uint256", type: "uint256" },
          { name: "totalSupply", internalType: "uint256", type: "uint256" },
          {
            name: "currentBranchState",
            internalType: "struct IFluidVaultResolver.CurrentBranchState",
            type: "tuple",
            components: [
              { name: "status", internalType: "uint256", type: "uint256" },
              { name: "minimaTick", internalType: "int256", type: "int256" },
              { name: "debtFactor", internalType: "uint256", type: "uint256" },
              { name: "partials", internalType: "uint256", type: "uint256" },
              { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
              { name: "baseBranchId", internalType: "uint256", type: "uint256" },
              { name: "baseBranchMinima", internalType: "int256", type: "int256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultVariables2Raw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    name: "getVaultVariablesRaw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getVaultsAbsorb",
    outputs: [
      {
        name: "absorbData_",
        internalType: "struct IFluidVaultResolver.AbsorbStruct[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "absorbAvailable", internalType: "bool", type: "bool" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "vaults_", internalType: "address[]", type: "address[]" }],
    name: "getVaultsAbsorb",
    outputs: [
      {
        name: "absorbData_",
        internalType: "struct IFluidVaultResolver.AbsorbStruct[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "absorbAvailable", internalType: "bool", type: "bool" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "vaults_", internalType: "address[]", type: "address[]" }],
    name: "getVaultsEntireData",
    outputs: [
      {
        name: "vaultsData_",
        internalType: "struct IFluidVaultResolver.VaultEntireData[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          {
            name: "constantVariables",
            internalType: "struct IFluidVaultResolver.ConstantViews",
            type: "tuple",
            components: [
              { name: "liquidity", internalType: "address", type: "address" },
              { name: "factory", internalType: "address", type: "address" },
              { name: "adminImplementation", internalType: "address", type: "address" },
              { name: "secondaryImplementation", internalType: "address", type: "address" },
              { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
              { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
              { name: "vaultId", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
            ],
          },
          {
            name: "configs",
            internalType: "struct IFluidVaultResolver.Configs",
            type: "tuple",
            components: [
              { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "collateralFactor", internalType: "uint16", type: "uint16" },
              { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
              { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
              { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
              { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
              { name: "borrowFee", internalType: "uint16", type: "uint16" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
              { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
              { name: "rebalancer", internalType: "address", type: "address" },
            ],
          },
          {
            name: "exchangePricesAndRates",
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            type: "tuple",
            components: [
              { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
              { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
              { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "rewardsRate", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "totalSupplyAndBorrow",
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            type: "tuple",
            components: [
              { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
              { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
              { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
              { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "limitsAndAvailability",
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            type: "tuple",
            components: [
              { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
              { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "vaultState",
            internalType: "struct IFluidVaultResolver.VaultState",
            type: "tuple",
            components: [
              { name: "totalPositions", internalType: "uint256", type: "uint256" },
              { name: "topTick", internalType: "int256", type: "int256" },
              { name: "currentBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              {
                name: "currentBranchState",
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                type: "tuple",
                components: [
                  { name: "status", internalType: "uint256", type: "uint256" },
                  { name: "minimaTick", internalType: "int256", type: "int256" },
                  { name: "debtFactor", internalType: "uint256", type: "uint256" },
                  { name: "partials", internalType: "uint256", type: "uint256" },
                  { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                ],
              },
            ],
          },
          {
            name: "liquidityUserSupplyData",
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "supply", internalType: "uint256", type: "uint256" },
              { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidityUserBorrowData",
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getVaultsEntireData",
    outputs: [
      {
        name: "vaultsData_",
        internalType: "struct IFluidVaultResolver.VaultEntireData[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          {
            name: "constantVariables",
            internalType: "struct IFluidVaultResolver.ConstantViews",
            type: "tuple",
            components: [
              { name: "liquidity", internalType: "address", type: "address" },
              { name: "factory", internalType: "address", type: "address" },
              { name: "adminImplementation", internalType: "address", type: "address" },
              { name: "secondaryImplementation", internalType: "address", type: "address" },
              { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
              { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
              { name: "vaultId", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
            ],
          },
          {
            name: "configs",
            internalType: "struct IFluidVaultResolver.Configs",
            type: "tuple",
            components: [
              { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "collateralFactor", internalType: "uint16", type: "uint16" },
              { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
              { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
              { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
              { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
              { name: "borrowFee", internalType: "uint16", type: "uint16" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
              { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
              { name: "rebalancer", internalType: "address", type: "address" },
            ],
          },
          {
            name: "exchangePricesAndRates",
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            type: "tuple",
            components: [
              { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
              { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
              { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "rewardsRate", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "totalSupplyAndBorrow",
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            type: "tuple",
            components: [
              { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
              { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
              { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
              { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "limitsAndAvailability",
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            type: "tuple",
            components: [
              { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
              { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "vaultState",
            internalType: "struct IFluidVaultResolver.VaultState",
            type: "tuple",
            components: [
              { name: "totalPositions", internalType: "uint256", type: "uint256" },
              { name: "topTick", internalType: "int256", type: "int256" },
              { name: "currentBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              {
                name: "currentBranchState",
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                type: "tuple",
                components: [
                  { name: "status", internalType: "uint256", type: "uint256" },
                  { name: "minimaTick", internalType: "int256", type: "int256" },
                  { name: "debtFactor", internalType: "uint256", type: "uint256" },
                  { name: "partials", internalType: "uint256", type: "uint256" },
                  { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                ],
              },
            ],
          },
          {
            name: "liquidityUserSupplyData",
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "supply", internalType: "uint256", type: "uint256" },
              { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidityUserBorrowData",
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "slot_", internalType: "uint256", type: "uint256" }],
    name: "normalSlot",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [{ name: "nftId_", internalType: "uint256", type: "uint256" }],
    name: "positionByNftId",
    outputs: [
      {
        name: "userPosition_",
        internalType: "struct IFluidVaultResolver.UserPosition",
        type: "tuple",
        components: [
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "owner", internalType: "address", type: "address" },
          { name: "isLiquidated", internalType: "bool", type: "bool" },
          { name: "isSupplyPosition", internalType: "bool", type: "bool" },
          { name: "tick", internalType: "int256", type: "int256" },
          { name: "tickId", internalType: "uint256", type: "uint256" },
          { name: "beforeSupply", internalType: "uint256", type: "uint256" },
          { name: "beforeBorrow", internalType: "uint256", type: "uint256" },
          { name: "beforeDustBorrow", internalType: "uint256", type: "uint256" },
          { name: "supply", internalType: "uint256", type: "uint256" },
          { name: "borrow", internalType: "uint256", type: "uint256" },
          { name: "dustBorrow", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "vaultData_",
        internalType: "struct IFluidVaultResolver.VaultEntireData",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          {
            name: "constantVariables",
            internalType: "struct IFluidVaultResolver.ConstantViews",
            type: "tuple",
            components: [
              { name: "liquidity", internalType: "address", type: "address" },
              { name: "factory", internalType: "address", type: "address" },
              { name: "adminImplementation", internalType: "address", type: "address" },
              { name: "secondaryImplementation", internalType: "address", type: "address" },
              { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
              { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
              { name: "vaultId", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
            ],
          },
          {
            name: "configs",
            internalType: "struct IFluidVaultResolver.Configs",
            type: "tuple",
            components: [
              { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "collateralFactor", internalType: "uint16", type: "uint16" },
              { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
              { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
              { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
              { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
              { name: "borrowFee", internalType: "uint16", type: "uint16" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
              { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
              { name: "rebalancer", internalType: "address", type: "address" },
            ],
          },
          {
            name: "exchangePricesAndRates",
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            type: "tuple",
            components: [
              { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
              { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
              { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "rewardsRate", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "totalSupplyAndBorrow",
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            type: "tuple",
            components: [
              { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
              { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
              { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
              { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "limitsAndAvailability",
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            type: "tuple",
            components: [
              { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
              { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "vaultState",
            internalType: "struct IFluidVaultResolver.VaultState",
            type: "tuple",
            components: [
              { name: "totalPositions", internalType: "uint256", type: "uint256" },
              { name: "topTick", internalType: "int256", type: "int256" },
              { name: "currentBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              {
                name: "currentBranchState",
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                type: "tuple",
                components: [
                  { name: "status", internalType: "uint256", type: "uint256" },
                  { name: "minimaTick", internalType: "int256", type: "int256" },
                  { name: "debtFactor", internalType: "uint256", type: "uint256" },
                  { name: "partials", internalType: "uint256", type: "uint256" },
                  { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                ],
              },
            ],
          },
          {
            name: "liquidityUserSupplyData",
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "supply", internalType: "uint256", type: "uint256" },
              { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidityUserBorrowData",
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user_", internalType: "address", type: "address" }],
    name: "positionsByUser",
    outputs: [
      {
        name: "userPositions_",
        internalType: "struct IFluidVaultResolver.UserPosition[]",
        type: "tuple[]",
        components: [
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "owner", internalType: "address", type: "address" },
          { name: "isLiquidated", internalType: "bool", type: "bool" },
          { name: "isSupplyPosition", internalType: "bool", type: "bool" },
          { name: "tick", internalType: "int256", type: "int256" },
          { name: "tickId", internalType: "uint256", type: "uint256" },
          { name: "beforeSupply", internalType: "uint256", type: "uint256" },
          { name: "beforeBorrow", internalType: "uint256", type: "uint256" },
          { name: "beforeDustBorrow", internalType: "uint256", type: "uint256" },
          { name: "supply", internalType: "uint256", type: "uint256" },
          { name: "borrow", internalType: "uint256", type: "uint256" },
          { name: "dustBorrow", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "vaultsData_",
        internalType: "struct IFluidVaultResolver.VaultEntireData[]",
        type: "tuple[]",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          {
            name: "constantVariables",
            internalType: "struct IFluidVaultResolver.ConstantViews",
            type: "tuple",
            components: [
              { name: "liquidity", internalType: "address", type: "address" },
              { name: "factory", internalType: "address", type: "address" },
              { name: "adminImplementation", internalType: "address", type: "address" },
              { name: "secondaryImplementation", internalType: "address", type: "address" },
              { name: "supplyToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "borrowToken", internalType: "contract IERC20Metadata", type: "address" },
              { name: "supplyDecimals", internalType: "uint8", type: "uint8" },
              { name: "borrowDecimals", internalType: "uint8", type: "uint8" },
              { name: "vaultId", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityBorrowExchangePriceSlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserSupplySlot", internalType: "bytes32", type: "bytes32" },
              { name: "liquidityUserBorrowSlot", internalType: "bytes32", type: "bytes32" },
            ],
          },
          {
            name: "configs",
            internalType: "struct IFluidVaultResolver.Configs",
            type: "tuple",
            components: [
              { name: "supplyRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "borrowRateMagnifier", internalType: "uint16", type: "uint16" },
              { name: "collateralFactor", internalType: "uint16", type: "uint16" },
              { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
              { name: "liquidationMaxLimit", internalType: "uint16", type: "uint16" },
              { name: "withdrawalGap", internalType: "uint16", type: "uint16" },
              { name: "liquidationPenalty", internalType: "uint16", type: "uint16" },
              { name: "borrowFee", internalType: "uint16", type: "uint16" },
              { name: "oracle", internalType: "address", type: "address" },
              { name: "oraclePriceOperate", internalType: "uint256", type: "uint256" },
              { name: "oraclePriceLiquidate", internalType: "uint256", type: "uint256" },
              { name: "rebalancer", internalType: "address", type: "address" },
            ],
          },
          {
            name: "exchangePricesAndRates",
            internalType: "struct IFluidVaultResolver.ExchangePricesAndRates",
            type: "tuple",
            components: [
              { name: "lastStoredLiquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredLiquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "lastStoredVaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquiditySupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "liquidityBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultSupplyExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "vaultBorrowExchangePrice", internalType: "uint256", type: "uint256" },
              { name: "supplyRateVault", internalType: "uint256", type: "uint256" },
              { name: "borrowRateVault", internalType: "uint256", type: "uint256" },
              { name: "supplyRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "borrowRateLiquidity", internalType: "uint256", type: "uint256" },
              { name: "rewardsRate", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "totalSupplyAndBorrow",
            internalType: "struct IFluidVaultResolver.TotalSupplyAndBorrow",
            type: "tuple",
            components: [
              { name: "totalSupplyVault", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowVault", internalType: "uint256", type: "uint256" },
              { name: "totalSupplyLiquidity", internalType: "uint256", type: "uint256" },
              { name: "totalBorrowLiquidity", internalType: "uint256", type: "uint256" },
              { name: "absorbedSupply", internalType: "uint256", type: "uint256" },
              { name: "absorbedBorrow", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "limitsAndAvailability",
            internalType: "struct IFluidVaultResolver.LimitsAndAvailability",
            type: "tuple",
            components: [
              { name: "withdrawLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
              { name: "minimumBorrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "vaultState",
            internalType: "struct IFluidVaultResolver.VaultState",
            type: "tuple",
            components: [
              { name: "totalPositions", internalType: "uint256", type: "uint256" },
              { name: "topTick", internalType: "int256", type: "int256" },
              { name: "currentBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBranch", internalType: "uint256", type: "uint256" },
              { name: "totalBorrow", internalType: "uint256", type: "uint256" },
              { name: "totalSupply", internalType: "uint256", type: "uint256" },
              {
                name: "currentBranchState",
                internalType: "struct IFluidVaultResolver.CurrentBranchState",
                type: "tuple",
                components: [
                  { name: "status", internalType: "uint256", type: "uint256" },
                  { name: "minimaTick", internalType: "int256", type: "int256" },
                  { name: "debtFactor", internalType: "uint256", type: "uint256" },
                  { name: "partials", internalType: "uint256", type: "uint256" },
                  { name: "debtLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchId", internalType: "uint256", type: "uint256" },
                  { name: "baseBranchMinima", internalType: "int256", type: "int256" },
                ],
              },
            ],
          },
          {
            name: "liquidityUserSupplyData",
            internalType: "struct IFluidVaultResolver.UserSupplyData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "supply", internalType: "uint256", type: "uint256" },
              { name: "withdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseWithdrawalLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "withdrawable", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "liquidityUserBorrowData",
            internalType: "struct IFluidVaultResolver.UserBorrowData",
            type: "tuple",
            components: [
              { name: "modeWithInterest", internalType: "bool", type: "bool" },
              { name: "borrow", internalType: "uint256", type: "uint256" },
              { name: "borrowLimit", internalType: "uint256", type: "uint256" },
              { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
              { name: "expandPercent", internalType: "uint256", type: "uint256" },
              { name: "expandDuration", internalType: "uint256", type: "uint256" },
              { name: "baseBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "maxBorrowLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowableUntilLimit", internalType: "uint256", type: "uint256" },
              { name: "borrowable", internalType: "uint256", type: "uint256" },
              { name: "borrowLimitUtilization", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user_", internalType: "address", type: "address" }],
    name: "positionsNftIdOfUser",
    outputs: [{ name: "nftIds_", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "tickRaw_", internalType: "uint256", type: "uint256" }],
    name: "tickHelper",
    outputs: [{ name: "tick", internalType: "int256", type: "int256" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [],
    name: "totalPositions",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "nftId_", internalType: "uint256", type: "uint256" }],
    name: "vaultByNftId",
    outputs: [{ name: "vault_", internalType: "contract IFluidVault", type: "address" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInterestRateModelV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInterestRateModelV2Abi = [
  {
    type: "function",
    inputs: [],
    name: "ASSET_DATA_OVERFLOW_LIMIT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "DP", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "RCOMP_MAX",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "X_MAX", outputs: [{ name: "", internalType: "int256", type: "int256" }], stateMutability: "view" },
  { type: "function", inputs: [], name: "acceptOwnership", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      {
        name: "_c",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
      },
      { name: "_totalDeposits", internalType: "uint256", type: "uint256" },
      { name: "_totalBorrowAmount", internalType: "uint256", type: "uint256" },
      { name: "_interestRateTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateCompoundInterestRate",
    outputs: [
      { name: "rcomp", internalType: "uint256", type: "uint256" },
      { name: "ri", internalType: "int256", type: "int256" },
      { name: "Tcrit", internalType: "int256", type: "int256" },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      {
        name: "_c",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
      },
      { name: "_totalDeposits", internalType: "uint256", type: "uint256" },
      { name: "_totalBorrowAmount", internalType: "uint256", type: "uint256" },
      { name: "_interestRateTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateCompoundInterestRateWithOverflowDetection",
    outputs: [
      { name: "rcomp", internalType: "uint256", type: "uint256" },
      { name: "ri", internalType: "int256", type: "int256" },
      { name: "Tcrit", internalType: "int256", type: "int256" },
      { name: "overflow", internalType: "bool", type: "bool" },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      {
        name: "_c",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
      },
      { name: "_totalDeposits", internalType: "uint256", type: "uint256" },
      { name: "_totalBorrowAmount", internalType: "uint256", type: "uint256" },
      { name: "_interestRateTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateCurrentInterestRate",
    outputs: [{ name: "rcur", internalType: "uint256", type: "uint256" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "config",
    outputs: [
      { name: "uopt", internalType: "int256", type: "int256" },
      { name: "ucrit", internalType: "int256", type: "int256" },
      { name: "ulow", internalType: "int256", type: "int256" },
      { name: "ki", internalType: "int256", type: "int256" },
      { name: "kcrit", internalType: "int256", type: "int256" },
      { name: "klow", internalType: "int256", type: "int256" },
      { name: "klin", internalType: "int256", type: "int256" },
      { name: "beta", internalType: "int256", type: "int256" },
      { name: "ri", internalType: "int256", type: "int256" },
      { name: "Tcrit", internalType: "int256", type: "int256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "address", type: "address" },
      { name: "_asset", internalType: "address", type: "address" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getCompoundInterestRate",
    outputs: [{ name: "rcomp", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_asset", internalType: "address", type: "address" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getCompoundInterestRateAndUpdate",
    outputs: [{ name: "rcomp", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "address", type: "address" },
      { name: "_asset", internalType: "address", type: "address" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getCurrentInterestRate",
    outputs: [{ name: "rcur", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "interestRateModelPing",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "_silos", internalType: "address[]", type: "address[]" },
      { name: "_siloRepository", internalType: "address", type: "address" },
    ],
    name: "migrationFromV1",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "address", type: "address" },
      { name: "_asset", internalType: "address", type: "address" },
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "overflowDetected",
    outputs: [{ name: "overflow", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "removePendingOwnership", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "address", type: "address" },
      { name: "_asset", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPendingOwner", internalType: "address", type: "address" }],
    name: "transferPendingOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "silo", internalType: "address", type: "address", indexed: true },
      { name: "asset", internalType: "address", type: "address", indexed: true },
      {
        name: "config",
        internalType: "struct IInterestRateModelV2.Config",
        type: "tuple",
        components: [
          { name: "uopt", internalType: "int256", type: "int256" },
          { name: "ucrit", internalType: "int256", type: "int256" },
          { name: "ulow", internalType: "int256", type: "int256" },
          { name: "ki", internalType: "int256", type: "int256" },
          { name: "kcrit", internalType: "int256", type: "int256" },
          { name: "klow", internalType: "int256", type: "int256" },
          { name: "klin", internalType: "int256", type: "int256" },
          { name: "beta", internalType: "int256", type: "int256" },
          { name: "ri", internalType: "int256", type: "int256" },
          { name: "Tcrit", internalType: "int256", type: "int256" },
        ],
        indexed: false,
      },
    ],
    name: "ConfigUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "newPendingOwner", internalType: "address", type: "address", indexed: true }],
    name: "OwnershipPending",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "newOwner", internalType: "address", type: "address", indexed: true }],
    name: "OwnershipTransferred",
  },
  { type: "error", inputs: [], name: "InvalidBeta" },
  { type: "error", inputs: [], name: "InvalidKcrit" },
  { type: "error", inputs: [], name: "InvalidKi" },
  { type: "error", inputs: [], name: "InvalidKlin" },
  { type: "error", inputs: [], name: "InvalidKlow" },
  { type: "error", inputs: [], name: "InvalidRi" },
  { type: "error", inputs: [], name: "InvalidTcrit" },
  { type: "error", inputs: [], name: "InvalidTimestamps" },
  { type: "error", inputs: [], name: "InvalidUcrit" },
  { type: "error", inputs: [], name: "InvalidUlow" },
  { type: "error", inputs: [], name: "InvalidUopt" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIsolationToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iIsolationTokenAbi = [
  {
    type: "function",
    inputs: [],
    name: "BORROW_POSITION_PROXY",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DOLOMITE_MARGIN",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "UNDERLYING_TOKEN",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "allowableCollateralMarketIds",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [],
    name: "allowableDebtMarketIds",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "calculateVaultByAccount",
    outputs: [{ name: "_vault", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "createVault",
    outputs: [{ name: "", internalType: "contract IIsolationVault", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_toAccountNumber", internalType: "uint256", type: "uint256" },
      { name: "_amountWei", internalType: "uint256", type: "uint256" },
    ],
    name: "createVaultAndDepositIntoDolomiteMargin",
    outputs: [{ name: "", internalType: "contract IIsolationVault", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_toAccountNumber", internalType: "uint256", type: "uint256" },
      { name: "_amountWei", internalType: "uint256", type: "uint256" },
    ],
    name: "depositIntoDolomiteMargin",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_toAccountNumber", internalType: "uint256", type: "uint256" },
      { name: "_otherMarketId", internalType: "uint256", type: "uint256" },
      { name: "_amountWei", internalType: "uint256", type: "uint256" },
    ],
    name: "depositOtherTokenIntoDolomiteMarginForVaultOwner",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_vault", internalType: "address", type: "address" }],
    name: "getAccountByVault",
    outputs: [{ name: "_account", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "getVaultByAccount",
    outputs: [{ name: "_vault", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "isInitialized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "isIsolationAsset",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [{ name: "_tokenConverter", internalType: "address", type: "address" }],
    name: "isTokenConverterTrusted",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "marketId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "userVaultImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_fromAccountNumber", internalType: "uint256", type: "uint256" },
      { name: "_amountWei", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawFromDolomiteMargin",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "spender", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMaestro
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMaestroAbi = [
  {
    type: "function",
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    name: "cancel",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "depositNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "isIntegration",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "orderManager",
    outputs: [{ name: "", internalType: "contract IOrderManager", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "permit2",
    outputs: [{ name: "", internalType: "contract IPermit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "params",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "placeLinkedOrder",
    outputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "route",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      { name: "whitelisted", internalType: "bool", type: "bool" },
    ],
    name: "setIntegration",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "spotExecutor",
    outputs: [{ name: "", internalType: "contract SimpleSpotExecutor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "swapAndDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "swapAndDepositNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "swapAndDepositWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "swapAndDepositWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "trade",
    outputs: [
      { name: "", internalType: "PositionId", type: "bytes32" },
      {
        name: "",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrder",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrderWithFees",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams1",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "linkedOrderParams2",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrders",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId1", internalType: "OrderId", type: "bytes32" },
      { name: "linkedOrderId2", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams1",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "linkedOrderParams2",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrdersWithFees",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId1", internalType: "OrderId", type: "bytes32" },
      { name: "linkedOrderId2", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeWithFees",
    outputs: [
      { name: "", internalType: "PositionId", type: "bytes32" },
      {
        name: "",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "transferPosition",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdrawNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "treasury", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "basisPoints", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "FeeCollected",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "integration", internalType: "address", type: "address", indexed: true },
      { name: "whitelisted", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "IntegrationSet",
  },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "AboveMaxGasMultiplier" },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "BelowMinGasMultiplier" },
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  {
    type: "error",
    inputs: [
      { name: "required", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "InsufficientPermitAmount",
  },
  { type: "error", inputs: [], name: "InvalidCashflow" },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  {
    type: "error",
    inputs: [
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidDeadline",
  },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "orderType", internalType: "enum OrderType", type: "uint8" }], name: "InvalidOrderType" },
  {
    type: "error",
    inputs: [
      { name: "forwardPrice", internalType: "uint256", type: "uint256" },
      { name: "limitPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidPrice",
  },
  { type: "error", inputs: [], name: "InvalidQuantity" },
  { type: "error", inputs: [{ name: "tolerance", internalType: "uint256", type: "uint256" }], name: "InvalidTolerance" },
  {
    type: "error",
    inputs: [
      { name: "orderId1", internalType: "OrderId", type: "bytes32" },
      { name: "orderId2", internalType: "OrderId", type: "bytes32" },
    ],
    name: "MismatchingPositionId",
  },
  {
    type: "error",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "requested", internalType: "uint256", type: "uint256" },
    ],
    name: "NotEnoughBalance",
  },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "NotNativeToken" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderAlreadyExists" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "OrderExpired",
  },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderInvalidated" },
  { type: "error", inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }], name: "PositionDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
  { type: "error", inputs: [{ name: "integration", internalType: "address", type: "address" }], name: "UnknownIntegration" },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedToken" },
  { type: "error", inputs: [], name: "ZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMaestroEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMaestroEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "treasury", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "basisPoints", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "FeeCollected",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "integration", internalType: "address", type: "address", indexed: true },
      { name: "whitelisted", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "IntegrationSet",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMoneyMarket
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMoneyMarketAbi = [
  {
    type: "function",
    inputs: [],
    name: "NEEDS_ACCOUNT",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [{ name: "actualAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "collateralBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "debtBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "initialise",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "lend",
    outputs: [{ name: "actualAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "repay",
    outputs: [{ name: "actualAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "retrieve",
    outputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "actualAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Borrowed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Lent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Repaid",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Retrieved",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
    ],
    name: "RewardsClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "rewardsToken", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      { name: "rewardsAmount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "RewardsClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdrawn",
  },
  { type: "error", inputs: [], name: "InvalidMoneyMarketId" },
  { type: "error", inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }], name: "InvalidPositionId" },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "TokenCantBeRetrieved" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMoneyMarketEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMoneyMarketEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Borrowed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Lent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Repaid",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Retrieved",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
    ],
    name: "RewardsClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "rewardsToken", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      { name: "rewardsAmount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "RewardsClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "balanceBefore", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdrawn",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMoneyMarketView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMoneyMarketViewAbi = [
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedAsset" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOrderManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOrderManagerAbi = [
  {
    type: "function",
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    name: "cancel",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "execute",
    outputs: [
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "keeperReward_", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "executeWithFees",
    outputs: [
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "keeperReward_", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    name: "hasOrder",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    name: "orders",
    outputs: [
      {
        name: "order",
        internalType: "struct Order",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "tolerance", internalType: "uint256", type: "uint256" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct OrderParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int128", type: "int128" },
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint256", type: "uint256" },
          { name: "cashflow", internalType: "int128", type: "int128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "place",
    outputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct OrderParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int128", type: "int128" },
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint256", type: "uint256" },
          { name: "cashflow", internalType: "int128", type: "int128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "placeOnBehalfOf",
    outputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }],
    name: "setGasMultiplier",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "gasTip", internalType: "uint64", type: "uint64" }],
    name: "setGasTip",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_oracle", internalType: "contract IContangoOracle", type: "address" }],
    name: "setOracle",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "treasury", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "basisPoints", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "FeeCollected",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "gasMultiplier", internalType: "uint256", type: "uint256", indexed: false }],
    name: "GasMultiplierSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "gasTip", internalType: "uint256", type: "uint256", indexed: false }],
    name: "GasTipSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "oracle", internalType: "contract IContangoOracle", type: "address", indexed: false }],
    name: "OracleSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true }],
    name: "OrderCancelled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "keeperReward", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "OrderExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "quantity", internalType: "int256", type: "int256", indexed: false },
      { name: "limitPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tolerance", internalType: "uint256", type: "uint256", indexed: false },
      { name: "cashflow", internalType: "int256", type: "int256", indexed: false },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8", indexed: false },
      { name: "deadline", internalType: "uint256", type: "uint256", indexed: false },
      { name: "orderType", internalType: "enum OrderType", type: "uint8", indexed: false },
      { name: "placedBy", internalType: "address", type: "address", indexed: false },
    ],
    name: "OrderPlaced",
  },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "AboveMaxGasMultiplier" },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "BelowMinGasMultiplier" },
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  {
    type: "error",
    inputs: [
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidDeadline",
  },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "orderType", internalType: "enum OrderType", type: "uint8" }], name: "InvalidOrderType" },
  {
    type: "error",
    inputs: [
      { name: "forwardPrice", internalType: "uint256", type: "uint256" },
      { name: "limitPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidPrice",
  },
  { type: "error", inputs: [], name: "InvalidQuantity" },
  { type: "error", inputs: [{ name: "tolerance", internalType: "uint256", type: "uint256" }], name: "InvalidTolerance" },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderAlreadyExists" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "OrderExpired",
  },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderInvalidated" },
  { type: "error", inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }], name: "PositionDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOrderManagerErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOrderManagerErrorsAbi = [
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "AboveMaxGasMultiplier" },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "BelowMinGasMultiplier" },
  {
    type: "error",
    inputs: [
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidDeadline",
  },
  { type: "error", inputs: [{ name: "orderType", internalType: "enum OrderType", type: "uint8" }], name: "InvalidOrderType" },
  {
    type: "error",
    inputs: [
      { name: "forwardPrice", internalType: "uint256", type: "uint256" },
      { name: "limitPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidPrice",
  },
  { type: "error", inputs: [], name: "InvalidQuantity" },
  { type: "error", inputs: [{ name: "tolerance", internalType: "uint256", type: "uint256" }], name: "InvalidTolerance" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderAlreadyExists" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "OrderExpired",
  },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderInvalidated" },
  { type: "error", inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }], name: "PositionDoesNotExist" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOrderManagerEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOrderManagerEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "treasury", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "basisPoints", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "FeeCollected",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "gasMultiplier", internalType: "uint256", type: "uint256", indexed: false }],
    name: "GasMultiplierSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "gasTip", internalType: "uint256", type: "uint256", indexed: false }],
    name: "GasTipSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "oracle", internalType: "contract IContangoOracle", type: "address", indexed: false }],
    name: "OracleSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true }],
    name: "OrderCancelled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "keeperReward", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "OrderExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "quantity", internalType: "int256", type: "int256", indexed: false },
      { name: "limitPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tolerance", internalType: "uint256", type: "uint256", indexed: false },
      { name: "cashflow", internalType: "int256", type: "int256", indexed: false },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8", indexed: false },
      { name: "deadline", internalType: "uint256", type: "uint256", indexed: false },
      { name: "orderType", internalType: "enum OrderType", type: "uint8", indexed: false },
      { name: "placedBy", internalType: "address", type: "address", indexed: false },
    ],
    name: "OrderPlaced",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPermit2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPermit2Abi = [
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IPermit2.PermitTransferFrom",
        type: "tuple",
        components: [
          {
            name: "permitted",
            internalType: "struct IPermit2.TokenPermissions",
            type: "tuple",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "transferDetails",
        internalType: "struct IPermit2.SignatureTransferDetails",
        type: "tuple",
        components: [
          { name: "to", internalType: "address", type: "address" },
          { name: "requestedAmount", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "owner", internalType: "address", type: "address" },
      { name: "signature", internalType: "bytes", type: "bytes" },
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPoolAbi = [
  {
    type: "function",
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [{ name: "", internalType: "contract IPoolAddressesProvider", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "BRIDGE_PROTOCOL_FEE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "FLASHLOAN_PREMIUM_TOTAL",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "MAX_NUMBER_RESERVES",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
    ],
    name: "backUnbacked",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "dropReserve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "balanceFromBefore", internalType: "uint256", type: "uint256" },
      { name: "balanceToBefore", internalType: "uint256", type: "uint256" },
    ],
    name: "finalizeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "assets", internalType: "address[]", type: "address[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "interestRateModes", internalType: "uint256[]", type: "uint256[]" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "flashLoanSimple",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct AaveDataTypes.ReserveConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "uint8", type: "uint8" }],
    name: "getEModeCategoryData",
    outputs: [
      { name: "", internalType: "bytes32", type: "bytes32" },
      { name: "ltv", internalType: "uint16", type: "uint16" },
      { name: "liquidationThreshold", internalType: "uint16", type: "uint16" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "uint16", type: "uint16" }],
    name: "getReserveAddressById",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getReserveData",
    outputs: [
      {
        name: "",
        internalType: "struct AaveDataTypes.ReserveData",
        type: "tuple",
        components: [
          {
            name: "configuration",
            internalType: "struct AaveDataTypes.ReserveConfigurationMap",
            type: "tuple",
            components: [{ name: "data", internalType: "uint256", type: "uint256" }],
          },
          { name: "liquidityIndex", internalType: "uint128", type: "uint128" },
          { name: "currentLiquidityRate", internalType: "uint128", type: "uint128" },
          { name: "variableBorrowIndex", internalType: "uint128", type: "uint128" },
          { name: "currentVariableBorrowRate", internalType: "uint128", type: "uint128" },
          { name: "currentStableBorrowRate", internalType: "uint128", type: "uint128" },
          { name: "lastUpdateTimestamp", internalType: "uint40", type: "uint40" },
          { name: "id", internalType: "uint16", type: "uint16" },
          { name: "aTokenAddress", internalType: "contract IAToken", type: "address" },
          { name: "stableDebtTokenAddress", internalType: "contract IERC20Metadata", type: "address" },
          { name: "variableDebtTokenAddress", internalType: "contract IERC20Metadata", type: "address" },
          { name: "interestRateStrategyAddress", internalType: "address", type: "address" },
          { name: "accruedToTreasury", internalType: "uint128", type: "uint128" },
          { name: "unbacked", internalType: "uint128", type: "uint128" },
          { name: "isolationModeTotalDebt", internalType: "uint128", type: "uint128" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getReserveNormalizedIncome",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveNormalizedVariableDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getReservesList",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserAccountData",
    outputs: [
      { name: "totalCollateralBase", internalType: "uint256", type: "uint256" },
      { name: "totalDebtBase", internalType: "uint256", type: "uint256" },
      { name: "availableBorrowsBase", internalType: "uint256", type: "uint256" },
      { name: "currentLiquidationThreshold", internalType: "uint256", type: "uint256" },
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "healthFactor", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct AaveDataTypes.UserConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserEMode",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "aTokenAddress", internalType: "address", type: "address" },
      { name: "stableDebtAddress", internalType: "address", type: "address" },
      { name: "variableDebtAddress", internalType: "address", type: "address" },
      { name: "interestRateStrategyAddress", internalType: "address", type: "address" },
    ],
    name: "initReserve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "user", internalType: "address", type: "address" },
      { name: "debtToCover", internalType: "uint256", type: "uint256" },
      { name: "receiveAToken", internalType: "bool", type: "bool" },
    ],
    name: "liquidationCall",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "assets", internalType: "address[]", type: "address[]" }],
    name: "mintToTreasury",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "mintUnbacked",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" },
    ],
    name: "rebalanceStableBorrowRate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "repay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
    ],
    name: "repayWithATokens",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "permitV", internalType: "uint8", type: "uint8" },
      { name: "permitR", internalType: "bytes32", type: "bytes32" },
      { name: "permitS", internalType: "bytes32", type: "bytes32" },
    ],
    name: "repayWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "rescueTokens",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "resetIsolationModeTotalDebt",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      {
        name: "configuration",
        internalType: "struct AaveDataTypes.ReserveConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setConfiguration",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "rateStrategyAddress", internalType: "address", type: "address" },
    ],
    name: "setReserveInterestRateStrategyAddress",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "categoryId", internalType: "uint8", type: "uint8" }],
    name: "setUserEMode",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "useAsCollateral", internalType: "bool", type: "bool" },
    ],
    name: "setUserUseReserveAsCollateral",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "supply",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "permitV", internalType: "uint8", type: "uint8" },
      { name: "permitR", internalType: "bytes32", type: "bytes32" },
      { name: "permitS", internalType: "bytes32", type: "bytes32" },
    ],
    name: "supplyWithPermit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
    ],
    name: "swapBorrowRateMode",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "backer", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BackUnbacked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "onBehalfOf", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "interestRateMode", internalType: "enum AaveDataTypes.InterestRateMode", type: "uint8", indexed: false },
      { name: "borrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referralCode", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "Borrow",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "target", internalType: "address", type: "address", indexed: true },
      { name: "initiator", internalType: "address", type: "address", indexed: false },
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "interestRateMode", internalType: "enum AaveDataTypes.InterestRateMode", type: "uint8", indexed: false },
      { name: "premium", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referralCode", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "FlashLoan",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "totalDebt", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "IsolationModeTotalDebtUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address", indexed: true },
      { name: "debtAsset", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "debtToCover", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidatedCollateralAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "receiveAToken", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LiquidationCall",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "onBehalfOf", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referralCode", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "MintUnbacked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "amountMinted", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "MintedToTreasury",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "RebalanceStableBorrowRate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "repayer", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "useATokens", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "Repay",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "liquidityRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "stableBorrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "variableBorrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidityIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "variableBorrowIndex", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "ReserveDataUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "onBehalfOf", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referralCode", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "Supply",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "interestRateMode", internalType: "enum AaveDataTypes.InterestRateMode", type: "uint8", indexed: false },
    ],
    name: "SwapBorrowRateMode",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "categoryId", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "UserEModeSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdraw",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPoolAddressesProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPoolAddressesProviderAbi = [
  {
    type: "function",
    inputs: [],
    name: "getACLAdmin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getACLManager",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "getAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getMarketId",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getPool",
    outputs: [{ name: "", internalType: "contract IPool", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getPoolConfigurator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getPoolDataProvider",
    outputs: [{ name: "", internalType: "contract IPoolDataProviderV3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getPriceOracle",
    outputs: [{ name: "", internalType: "contract IAaveOracle", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getPriceOracleSentinel",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "newAclAdmin", internalType: "address", type: "address" }],
    name: "setACLAdmin",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newAclManager", internalType: "address", type: "address" }],
    name: "setACLManager",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32" },
      { name: "newAddress", internalType: "address", type: "address" },
    ],
    name: "setAddress",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32" },
      { name: "newImplementationAddress", internalType: "address", type: "address" },
    ],
    name: "setAddressAsProxy",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newMarketId", internalType: "string", type: "string" }],
    name: "setMarketId",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPoolConfiguratorImpl", internalType: "address", type: "address" }],
    name: "setPoolConfiguratorImpl",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newDataProvider", internalType: "address", type: "address" }],
    name: "setPoolDataProvider",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPoolImpl", internalType: "address", type: "address" }],
    name: "setPoolImpl",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPriceOracle", internalType: "address", type: "address" }],
    name: "setPriceOracle",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newPriceOracleSentinel", internalType: "address", type: "address" }],
    name: "setPriceOracleSentinel",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "ACLAdminUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "ACLManagerUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "AddressSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "proxyAddress", internalType: "address", type: "address", indexed: true },
      { name: "oldImplementationAddress", internalType: "address", type: "address", indexed: false },
      { name: "newImplementationAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "AddressSetAsProxy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldMarketId", internalType: "string", type: "string", indexed: true },
      { name: "newMarketId", internalType: "string", type: "string", indexed: true },
    ],
    name: "MarketIdSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "PoolConfiguratorUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "PoolDataProviderUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "PoolUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "PriceOracleSentinelUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldAddress", internalType: "address", type: "address", indexed: true },
      { name: "newAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "PriceOracleUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "proxyAddress", internalType: "address", type: "address", indexed: true },
      { name: "implementationAddress", internalType: "address", type: "address", indexed: true },
    ],
    name: "ProxyCreated",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPoolV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPoolV2Abi = [
  {
    type: "function",
    inputs: [],
    name: "FLASHLOAN_PREMIUM_TOTAL",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "LENDINGPOOL_REVISION",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "MAX_NUMBER_RESERVES",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "interestRateMode", internalType: "uint256", type: "uint256" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "borrow",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "balanceFromBefore", internalType: "uint256", type: "uint256" },
      { name: "balanceToBefore", internalType: "uint256", type: "uint256" },
    ],
    name: "finalizeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "assets", internalType: "address[]", type: "address[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "modes", internalType: "uint256[]", type: "uint256[]" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "params", internalType: "bytes", type: "bytes" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "getAddressesProvider",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct IPoolV2.ReserveConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveData",
    outputs: [
      {
        name: "",
        internalType: "struct IPoolV2.ReserveData",
        type: "tuple",
        components: [
          {
            name: "configuration",
            internalType: "struct IPoolV2.ReserveConfigurationMap",
            type: "tuple",
            components: [{ name: "data", internalType: "uint256", type: "uint256" }],
          },
          { name: "liquidityIndex", internalType: "uint128", type: "uint128" },
          { name: "variableBorrowIndex", internalType: "uint128", type: "uint128" },
          { name: "currentLiquidityRate", internalType: "uint128", type: "uint128" },
          { name: "currentVariableBorrowRate", internalType: "uint128", type: "uint128" },
          { name: "currentStableBorrowRate", internalType: "uint128", type: "uint128" },
          { name: "lastUpdateTimestamp", internalType: "uint40", type: "uint40" },
          { name: "aTokenAddress", internalType: "address", type: "address" },
          { name: "stableDebtTokenAddress", internalType: "address", type: "address" },
          { name: "variableDebtTokenAddress", internalType: "address", type: "address" },
          { name: "interestRateStrategyAddress", internalType: "contract IDefaultReserveInterestRateStrategyV2", type: "address" },
          { name: "id", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveLimits",
    outputs: [
      {
        name: "",
        internalType: "struct IPoolV2.ReserveLimits",
        type: "tuple",
        components: [
          { name: "depositLimit", internalType: "uint256", type: "uint256" },
          { name: "borrowLimit", internalType: "uint256", type: "uint256" },
          { name: "collateralUsageLimit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveNormalizedIncome",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getReserveNormalizedVariableDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getReservesList",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserAccountData",
    outputs: [
      { name: "totalCollateralETH", internalType: "uint256", type: "uint256" },
      { name: "totalDebtETH", internalType: "uint256", type: "uint256" },
      { name: "availableBorrowsETH", internalType: "uint256", type: "uint256" },
      { name: "currentLiquidationThreshold", internalType: "uint256", type: "uint256" },
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "healthFactor", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct IPoolV2.UserConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "aTokenAddress", internalType: "address", type: "address" },
      { name: "stableDebtAddress", internalType: "address", type: "address" },
      { name: "variableDebtAddress", internalType: "address", type: "address" },
      { name: "interestRateStrategyAddress", internalType: "address", type: "address" },
    ],
    name: "initReserve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "provider", internalType: "address", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "user", internalType: "address", type: "address" },
      { name: "debtToCover", internalType: "uint256", type: "uint256" },
      { name: "receiveAToken", internalType: "bool", type: "bool" },
    ],
    name: "liquidationCall",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address" },
      { name: "debtAsset", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" },
      { name: "debtToCover", internalType: "uint256", type: "uint256" },
      { name: "receiveAToken", internalType: "bool", type: "bool" },
    ],
    name: "liquidationCallUsingAgToken",
    outputs: [],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" },
    ],
    name: "rebalanceStableBorrowRate",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "rateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "repay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "rateMode", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
    ],
    name: "repayUsingAgToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "configuration", internalType: "uint256", type: "uint256" },
    ],
    name: "setConfiguration",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "val", internalType: "bool", type: "bool" }],
    name: "setPause",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "rateStrategyAddress", internalType: "address", type: "address" },
    ],
    name: "setReserveInterestRateStrategyAddress",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "depositLimit", internalType: "uint256", type: "uint256" },
      { name: "borrowLimit", internalType: "uint256", type: "uint256" },
      { name: "collateralUsageLimit", internalType: "uint256", type: "uint256" },
    ],
    name: "setReserveLimits",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "useAsCollateral", internalType: "bool", type: "bool" },
    ],
    name: "setUserUseReserveAsCollateral",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "rateMode", internalType: "uint256", type: "uint256" },
    ],
    name: "swapBorrowRateMode",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "onBehalfOf", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "borrowRateMode", internalType: "uint256", type: "uint256", indexed: false },
      { name: "borrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referral", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "Borrow",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "onBehalfOf", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referral", internalType: "uint16", type: "uint16", indexed: true },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "target", internalType: "address", type: "address", indexed: true },
      { name: "initiator", internalType: "address", type: "address", indexed: true },
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "premium", internalType: "uint256", type: "uint256", indexed: false },
      { name: "referralCode", internalType: "uint16", type: "uint16", indexed: false },
    ],
    name: "FlashLoan",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address", indexed: true },
      { name: "debtAsset", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "debtToCover", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidatedCollateralAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "receiveAToken", internalType: "bool", type: "bool", indexed: false },
      { name: "useAToken", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LiquidationCall",
  },
  { type: "event", anonymous: false, inputs: [], name: "Paused" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "RebalanceStableBorrowRate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "repayer", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "useAToken", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "Repay",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "liquidityRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "stableBorrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "variableBorrowRate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidityIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "variableBorrowIndex", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "ReserveDataUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
    ],
    name: "ReserveUsedAsCollateralEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "depositLimit", internalType: "uint256", type: "uint256", indexed: false },
      { name: "borrowLimit", internalType: "uint256", type: "uint256", indexed: false },
      { name: "collateralUsageLimit", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SetReserveLimits",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "rateMode", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Swap",
  },
  { type: "event", anonymous: false, inputs: [], name: "Unpaused" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "reserve", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdraw",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRewardDistributor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRewardDistributorAbi = [
  {
    type: "function",
    inputs: [{ name: "tokens", internalType: "contract IERC20Metadata[]", type: "address[]" }],
    name: "addAllowedRewardTokens",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "admin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    name: "allowedRewardTokens",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "checkpoint", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "checkpointToken",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "tokens", internalType: "contract IERC20Metadata[]", type: "address[]" }],
    name: "checkpointTokens",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "checkpointUser",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "claimToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokens", internalType: "contract IERC20Metadata[]", type: "address[]" },
    ],
    name: "claimTokens",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositToken",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokens", internalType: "address[]", type: "address[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "depositTokens",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "faucetDepositToken",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "getAllowedRewardTokens",
    outputs: [{ name: "", internalType: "contract IERC20Metadata[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getDomainSeparator",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "getNextNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getTimeCursor",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getTokenLastBalance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getTokenTimeCursor",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getTokensDistributedInWeek",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }],
    name: "getTotalSupplyAtTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getUserBalanceAtTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getUserTimeCursor",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getUserTokenTimeCursor",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getVotingEscrow",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "votingEscrow", internalType: "address", type: "address" },
      { name: "rewardFaucet_", internalType: "address", type: "address" },
      { name: "startTime", internalType: "uint256", type: "uint256" },
      { name: "admin_", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "isInitialized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "isOnlyCallerEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardFaucet",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "enabled", internalType: "bool", type: "bool" }],
    name: "setOnlyCallerCheck",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "enabled", internalType: "bool", type: "bool" },
      { name: "signature", internalType: "bytes", type: "bytes" },
    ],
    name: "setOnlyCallerCheckWithSignature",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newAdmin", internalType: "address", type: "address" }],
    name: "transferAdmin",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "newAdmin", internalType: "address", type: "address", indexed: true }],
    name: "NewAdmin",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "enabled", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "OnlyCallerOptIn",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "RewardDeposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "token", internalType: "address", type: "address", indexed: true }],
    name: "TokenAdded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "lastCheckpointTimestamp", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "TokenCheckpointed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "userTokenTimeCursor", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "TokensClaimed",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISilo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSiloAbi = [
  {
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "accrueInterest",
    outputs: [{ name: "interest", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "assetStorage",
    outputs: [
      {
        name: "",
        internalType: "struct ISilo.AssetStorage",
        type: "tuple",
        components: [
          { name: "collateralToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "collateralOnlyToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "debtToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "totalDeposits", internalType: "uint256", type: "uint256" },
          { name: "collateralOnlyDeposits", internalType: "uint256", type: "uint256" },
          { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "borrow",
    outputs: [
      { name: "debtAmount", internalType: "uint256", type: "uint256" },
      { name: "debtShare", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_borrower", internalType: "address", type: "address" },
    ],
    name: "borrowPossible",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_collateralOnly", internalType: "bool", type: "bool" },
    ],
    name: "deposit",
    outputs: [
      { name: "collateralAmount", internalType: "uint256", type: "uint256" },
      { name: "collateralShare", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_depositor", internalType: "address", type: "address" },
    ],
    name: "depositPossible",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_users", internalType: "address[]", type: "address[]" },
      { name: "_flashReceiverData", internalType: "bytes", type: "bytes" },
    ],
    name: "flashLiquidate",
    outputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "receivedCollaterals", internalType: "uint256[][]", type: "uint256[][]" },
      { name: "shareAmountsToRepay", internalType: "uint256[][]", type: "uint256[][]" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "getAssets",
    outputs: [{ name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getAssetsWithState",
    outputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      {
        name: "assetsStorage",
        internalType: "struct ISilo.AssetStorage[]",
        type: "tuple[]",
        components: [
          { name: "collateralToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "collateralOnlyToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "debtToken", internalType: "contract IERC20Metadata", type: "address" },
          { name: "totalDeposits", internalType: "uint256", type: "uint256" },
          { name: "collateralOnlyDeposits", internalType: "uint256", type: "uint256" },
          { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "harvestProtocolFees",
    outputs: [{ name: "harvestedAmounts", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "initAssetsTokens", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "interestData",
    outputs: [
      {
        name: "",
        internalType: "struct ISilo.AssetInterestData",
        type: "tuple",
        components: [
          { name: "harvestedProtocolFees", internalType: "uint256", type: "uint256" },
          { name: "protocolFees", internalType: "uint256", type: "uint256" },
          { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
          { name: "status", internalType: "enum ISilo.AssetStatus", type: "uint8" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_user", internalType: "address", type: "address" }],
    name: "isSolvent",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "liquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "repay",
    outputs: [
      { name: "repaidAmount", internalType: "uint256", type: "uint256" },
      { name: "repaidShare", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_asset", internalType: "address", type: "address" },
      { name: "_borrower", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "repayFor",
    outputs: [
      { name: "repaidAmount", internalType: "uint256", type: "uint256" },
      { name: "repaidShare", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "siloAsset",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "siloRepository",
    outputs: [{ name: "", internalType: "contract ISiloRepository", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "syncBridgeAssets", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "utilizationData",
    outputs: [
      {
        name: "data",
        internalType: "struct ISilo.UtilizationData",
        type: "tuple",
        components: [
          { name: "totalDeposits", internalType: "uint256", type: "uint256" },
          { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
          { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_collateralOnly", internalType: "bool", type: "bool" },
    ],
    name: "withdraw",
    outputs: [
      { name: "withdrawnAmount", internalType: "uint256", type: "uint256" },
      { name: "withdrawnShare", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "error", inputs: [], name: "AssetDoesNotExist" },
  { type: "error", inputs: [], name: "BorrowNotPossible" },
  { type: "error", inputs: [], name: "DepositNotPossible" },
  { type: "error", inputs: [], name: "DepositsExceedLimit" },
  { type: "error", inputs: [], name: "DifferentArrayLength" },
  { type: "error", inputs: [], name: "InvalidRepository" },
  { type: "error", inputs: [], name: "InvalidSiloVersion" },
  { type: "error", inputs: [], name: "LiquidationReentrancyCall" },
  { type: "error", inputs: [], name: "MaximumLTVReached" },
  { type: "error", inputs: [], name: "NotEnoughDeposits" },
  { type: "error", inputs: [], name: "NotEnoughLiquidity" },
  { type: "error", inputs: [], name: "NotSolvent" },
  { type: "error", inputs: [], name: "OnlyRouter" },
  { type: "error", inputs: [], name: "Paused" },
  { type: "error", inputs: [], name: "TokenIsNotAContract" },
  { type: "error", inputs: [], name: "UnexpectedEmptyReturn" },
  { type: "error", inputs: [], name: "UnsupportedLTVType" },
  { type: "error", inputs: [], name: "UserIsZero" },
  { type: "error", inputs: [], name: "ZeroAssets" },
  { type: "error", inputs: [], name: "ZeroShares" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISiloIncentivesController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSiloIncentivesControllerAbi = [
  {
    type: "function",
    inputs: [],
    name: "DISTRIBUTION_END",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "EMISSION_MANAGER",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "PRECISION",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "REVISION",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "REWARD_TOKEN",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "TEN_POW_PRECISION",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimRewards",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "user", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "claimRewardsOnBehalf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "claimRewardsToSelf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "emissionsPerSecond", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "configureAssets",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getAssetData",
    outputs: [
      {
        name: "",
        internalType: "struct ISiloIncentivesController.AssetData",
        type: "tuple",
        components: [
          { name: "index", internalType: "uint256", type: "uint256" },
          { name: "emissionPerSecond", internalType: "uint256", type: "uint256" },
          { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "user", internalType: "address", type: "address" }],
    name: "getClaimer",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getDistributionEnd",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "assets", internalType: "contract IERC20Metadata[]", type: "address[]" },
      { name: "user", internalType: "address", type: "address" },
    ],
    name: "getRewardsBalance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "asset", internalType: "address", type: "address" },
    ],
    name: "getUserAssetData",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_user", internalType: "address", type: "address" }],
    name: "getUserUnclaimedRewards",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "totalSupply", internalType: "uint256", type: "uint256" },
      { name: "userBalance", internalType: "uint256", type: "uint256" },
    ],
    name: "handleAction",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "notificationReceiverPing",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "onAfterTransfer",
    outputs: [],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "rescueRewards", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setClaimer",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "distributionEnd", internalType: "uint256", type: "uint256" }],
    name: "setDistributionEnd",
    outputs: [],
    stateMutability: "nonpayable",
  },
  { type: "error", inputs: [], name: "ClaimerUnauthorized" },
  { type: "error", inputs: [], name: "IndexOverflow" },
  { type: "error", inputs: [], name: "IndexOverflowAtEmissionsPerSecond" },
  { type: "error", inputs: [], name: "InvalidConfiguration" },
  { type: "error", inputs: [], name: "InvalidToAddress" },
  { type: "error", inputs: [], name: "InvalidUserAddress" },
  { type: "error", inputs: [], name: "OnlyEmissionManager" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISiloLens
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSiloLensAbi = [
  {
    type: "function",
    inputs: [
      { name: "_assetTotalDeposits", internalType: "uint256", type: "uint256" },
      { name: "_shareToken", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "balanceOfUnderlying",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "borrowAPY",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "borrowShare",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "calcFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "calculateBorrowValue",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "calculateCollateralValue",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "collateralBalanceOfUnderlying",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "collateralOnlyDeposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "debtBalanceOfUnderlying",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "depositAPY",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
      { name: "_timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getBorrowAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getModel",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "getUserLTV",
    outputs: [{ name: "userLTV", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "getUserLiquidationThreshold",
    outputs: [{ name: "liquidationThreshold", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "getUserMaximumLTV",
    outputs: [{ name: "maximumLTV", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getUtilization",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "hasPosition",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_user", internalType: "address", type: "address" },
    ],
    name: "inDebt",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "liquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "protocolFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "siloRepository",
    outputs: [{ name: "", internalType: "contract ISiloRepository", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "totalBorrowAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "totalBorrowAmountWithInterest",
    outputs: [{ name: "_totalBorrowAmount", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "totalBorrowShare",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "totalDeposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "_asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "totalDepositsWithInterest",
    outputs: [{ name: "_totalDeposits", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "error", inputs: [], name: "DifferentArrayLength" },
  { type: "error", inputs: [], name: "InvalidRepository" },
  { type: "error", inputs: [], name: "UnsupportedLTVType" },
  { type: "error", inputs: [], name: "ZeroAssets" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISiloPriceProvidersRepository
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSiloPriceProvidersRepositoryAbi = [
  {
    type: "function",
    inputs: [],
    name: "QUOTE_TOKEN_DECIMALS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_provider", internalType: "address", type: "address" }],
    name: "isPriceProvider",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "priceProviders",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "providerList",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "providersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "providersReadyForAsset",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "quoteToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "siloRepository",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "error", inputs: [], name: "AssetNotSupported" },
  { type: "error", inputs: [], name: "InvalidPriceProvider" },
  { type: "error", inputs: [], name: "InvalidPriceProviderQuoteToken" },
  { type: "error", inputs: [], name: "InvalidRepository" },
  { type: "error", inputs: [], name: "ManagerDidNotChange" },
  { type: "error", inputs: [], name: "ManagerIsZero" },
  { type: "error", inputs: [], name: "OnlyManager" },
  { type: "error", inputs: [], name: "OnlyOwnerOrManager" },
  { type: "error", inputs: [], name: "OnlyRepository" },
  { type: "error", inputs: [], name: "PriceProviderAlreadyExists" },
  { type: "error", inputs: [], name: "PriceProviderDoesNotExist" },
  { type: "error", inputs: [], name: "PriceProviderNotRegistered" },
  { type: "error", inputs: [], name: "QuoteTokenNotSupported" },
  { type: "error", inputs: [], name: "TokenIsNotAContract" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISiloRepository
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSiloRepositoryAbi = [
  {
    type: "function",
    inputs: [
      { name: "", internalType: "contract ISilo", type: "address" },
      { name: "", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "assetConfigs",
    outputs: [
      {
        name: "",
        internalType: "struct ISiloRepository.AssetConfig",
        type: "tuple",
        components: [
          { name: "maxLoanToValue", internalType: "uint64", type: "uint64" },
          { name: "liquidationThreshold", internalType: "uint64", type: "uint64" },
          { name: "interestRateModel", internalType: "address", type: "address" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "bridgePool",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "entryFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "fees",
    outputs: [
      { name: "entryFee", internalType: "uint64", type: "uint64" },
      { name: "protocolShareFee", internalType: "uint64", type: "uint64" },
      { name: "protocolLiquidationFee", internalType: "uint64", type: "uint64" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getBridgeAssets",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getInterestRateModel",
    outputs: [{ name: "model", internalType: "contract IInterestRateModelV2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getLiquidationThreshold",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getMaxSiloDepositsValue",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getMaximumLTV",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "contract ISilo", type: "address" }],
    name: "getNotificationReceiver",
    outputs: [{ name: "", internalType: "contract ISiloIncentivesController", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getRemovedBridgeAssets",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    name: "getSilo",
    outputs: [{ name: "", internalType: "contract ISilo", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "getVersionForAsset",
    outputs: [{ name: "", internalType: "uint128", type: "uint128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "isPaused",
    outputs: [{ name: "globalPause", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_silo", internalType: "contract ISilo", type: "address" }],
    name: "isSilo",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_silo", internalType: "contract ISilo", type: "address" },
      { name: "asset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "isSiloPaused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "manager",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "maxLiquidity",
    outputs: [
      { name: "globalLimit", internalType: "bool", type: "bool" },
      { name: "defaultMaxLiquidity", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "priceProvidersRepository",
    outputs: [{ name: "", internalType: "contract ISiloPriceProvidersRepository", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "protocolLiquidationFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "protocolShareFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "router",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "siloFactory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "siloReverse",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "siloVersion",
    outputs: [
      { name: "byDefault", internalType: "uint128", type: "uint128" },
      { name: "latest", internalType: "uint128", type: "uint128" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "tokensFactory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "error", inputs: [], name: "AssetAlreadyAdded" },
  { type: "error", inputs: [], name: "AssetIsNotABridge" },
  { type: "error", inputs: [], name: "AssetIsZero" },
  { type: "error", inputs: [], name: "BridgeAssetIsZero" },
  { type: "error", inputs: [], name: "ConfigDidNotChange" },
  { type: "error", inputs: [], name: "EmptyBridgeAssets" },
  { type: "error", inputs: [], name: "FeesDidNotChange" },
  { type: "error", inputs: [], name: "GlobalLimitDidNotChange" },
  { type: "error", inputs: [], name: "GlobalPauseDidNotChange" },
  { type: "error", inputs: [], name: "InterestRateModelDidNotChange" },
  { type: "error", inputs: [], name: "InvalidEntryFee" },
  { type: "error", inputs: [], name: "InvalidInterestRateModel" },
  { type: "error", inputs: [], name: "InvalidLTV" },
  { type: "error", inputs: [], name: "InvalidLiquidationThreshold" },
  { type: "error", inputs: [], name: "InvalidNotificationReceiver" },
  { type: "error", inputs: [], name: "InvalidPriceProvidersRepository" },
  { type: "error", inputs: [], name: "InvalidProtocolLiquidationFee" },
  { type: "error", inputs: [], name: "InvalidProtocolShareFee" },
  { type: "error", inputs: [], name: "InvalidSiloFactory" },
  { type: "error", inputs: [], name: "InvalidSiloRouter" },
  { type: "error", inputs: [], name: "InvalidSiloVersion" },
  { type: "error", inputs: [], name: "InvalidTokensFactory" },
  { type: "error", inputs: [], name: "LastBridgeAsset" },
  { type: "error", inputs: [], name: "LiquidationThresholdDidNotChange" },
  { type: "error", inputs: [], name: "ManagerDidNotChange" },
  { type: "error", inputs: [], name: "ManagerIsZero" },
  { type: "error", inputs: [], name: "MaxLiquidityDidNotChange" },
  { type: "error", inputs: [], name: "MaximumLTVDidNotChange" },
  { type: "error", inputs: [], name: "NoPriceProviderForAsset" },
  { type: "error", inputs: [], name: "NotificationReceiverDidNotChange" },
  { type: "error", inputs: [], name: "OnlyManager" },
  { type: "error", inputs: [], name: "OnlyOwnerOrManager" },
  { type: "error", inputs: [], name: "PriceProviderRepositoryDidNotChange" },
  { type: "error", inputs: [], name: "RouterDidNotChange" },
  { type: "error", inputs: [], name: "SiloAlreadyExistsForAsset" },
  { type: "error", inputs: [], name: "SiloAlreadyExistsForBridgeAssets" },
  { type: "error", inputs: [], name: "SiloDoesNotExist" },
  { type: "error", inputs: [], name: "SiloIsZero" },
  { type: "error", inputs: [], name: "SiloMaxLiquidityDidNotChange" },
  { type: "error", inputs: [], name: "SiloNotAllowedForBridgeAsset" },
  { type: "error", inputs: [], name: "SiloPauseDidNotChange" },
  { type: "error", inputs: [], name: "SiloVersionDoesNotExist" },
  { type: "error", inputs: [], name: "TokenIsNotAContract" },
  { type: "error", inputs: [], name: "VersionForAssetDidNotChange" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStrategyBlocksEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStrategyBlocksEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "BeginStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "EndStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISwapRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSwapRouterAbi = [
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactInputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "amountOutMinimum", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "exactInput",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "amountOutMinimum", internalType: "uint256", type: "uint256" },
          { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
        ],
      },
    ],
    name: "exactInputSingle",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactOutputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "exactOutput",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" },
          { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
        ],
      },
    ],
    name: "exactOutputSingle",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "pancakeV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "ramsesV2SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUnderlyingPositionFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUnderlyingPositionFactoryAbi = [
  {
    type: "function",
    inputs: [{ name: "", internalType: "PositionId", type: "bytes32" }],
    name: "createUnderlyingPosition",
    outputs: [{ name: "", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "PositionId", type: "bytes32" }],
    name: "moneyMarket",
    outputs: [{ name: "", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    name: "moneyMarket",
    outputs: [{ name: "", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "imm", internalType: "contract IMoneyMarket", type: "address" }],
    name: "registerMoneyMarket",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "mm", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: true },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
    ],
    name: "UnderlyingPositionCreated",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUnderlyingPositionFactoryEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUnderlyingPositionFactoryEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "mm", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: true },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
    ],
    name: "UnderlyingPositionCreated",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapQuoter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapQuoterAbi = [
  {
    type: "function",
    inputs: [
      { name: "path", internalType: "bytes", type: "bytes" },
      { name: "amountIn", internalType: "uint256", type: "uint256" },
    ],
    name: "quoteExactInput",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenIn", internalType: "address", type: "address" },
      { name: "tokenOut", internalType: "address", type: "address" },
      { name: "fee", internalType: "uint24", type: "uint24" },
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
    ],
    name: "quoteExactInputSingle",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "path", internalType: "bytes", type: "bytes" },
      { name: "amountOut", internalType: "uint256", type: "uint256" },
    ],
    name: "quoteExactOutput",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenIn", internalType: "address", type: "address" },
      { name: "tokenOut", internalType: "address", type: "address" },
      { name: "fee", internalType: "uint24", type: "uint24" },
      { name: "amountOut", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
    ],
    name: "quoteExactOutputSingle",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3SwapCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3SwapCallbackAbi = [
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "pancakeV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "ramsesV2SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVaultAbi = [
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "depositNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositTo",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "isTokenSupported",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "isSupported", internalType: "bool", type: "bool" },
    ],
    name: "setTokenSupport",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }],
    name: "totalBalanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdrawNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Deposited",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "isSupported", internalType: "bool", type: "bool", indexed: true },
    ],
    name: "TokenSupportSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "Withdrawn",
  },
  {
    type: "error",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "requested", internalType: "uint256", type: "uint256" },
    ],
    name: "NotEnoughBalance",
  },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedToken" },
  { type: "error", inputs: [], name: "ZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVaultErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVaultErrorsAbi = [
  {
    type: "error",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "requested", internalType: "uint256", type: "uint256" },
    ],
    name: "NotEnoughBalance",
  },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedToken" },
  { type: "error", inputs: [], name: "ZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVaultEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVaultEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Deposited",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "isSupported", internalType: "bool", type: "bool", indexed: true },
    ],
    name: "TokenSupportSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "to", internalType: "address", type: "address", indexed: true },
    ],
    name: "Withdrawn",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotingEscrow
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotingEscrowAbi = [
  {
    type: "function",
    inputs: [],
    name: "MAXTIME",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "TOKEN",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "admin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "admin_early_unlock",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "admin_unlock_all",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "all_unlock",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "apply_smart_wallet_checker", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "apply_transfer_ownership", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "balMinter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "balToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "addr", internalType: "address", type: "address" },
      { name: "_t", internalType: "uint256", type: "uint256" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "addr", internalType: "address", type: "address" },
      { name: "_block", internalType: "uint256", type: "uint256" },
    ],
    name: "balanceOfAt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "newReceiver", internalType: "address", type: "address" }],
    name: "changeRewardReceiver",
    outputs: [],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "checkpoint", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "claimExternalRewards", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "commit_smart_wallet_checker",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "commit_transfer_ownership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_unlock_time", internalType: "uint256", type: "uint256" },
    ],
    name: "create_lock",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_addr", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit_for",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "early_unlock",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "epoch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "future_admin",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "future_smart_wallet_checker",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "get_last_user_slope",
    outputs: [{ name: "", internalType: "int128", type: "int128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "increase_amount",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_unlock_time", internalType: "uint256", type: "uint256" }],
    name: "increase_unlock_time",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_token_addr", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_admin_addr", internalType: "address", type: "address" },
      { name: "_admin_unlock_all", internalType: "address", type: "address" },
      { name: "_admin_early_unlock", internalType: "address", type: "address" },
      { name: "_max_time", internalType: "uint256", type: "uint256" },
      { name: "_balToken", internalType: "address", type: "address" },
      { name: "_balMinter", internalType: "address", type: "address" },
      { name: "_rewardReceiver", internalType: "address", type: "address" },
      { name: "_rewardReceiverChangeable", internalType: "bool", type: "bool" },
      { name: "_rewardDistributor", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "is_initialized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "arg0", internalType: "address", type: "address" }],
    name: "locked",
    outputs: [
      {
        name: "",
        internalType: "struct IVotingEscrow.LockedBalance",
        type: "tuple",
        components: [
          { name: "amount", internalType: "int128", type: "int128" },
          { name: "end", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_addr", internalType: "address", type: "address" }],
    name: "locked__end",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "penalty_k",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "penalty_treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "penalty_upd_ts",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "arg0", internalType: "uint256", type: "uint256" }],
    name: "point_history",
    outputs: [
      {
        name: "",
        internalType: "struct IVotingEscrow.Point",
        type: "tuple",
        components: [
          { name: "bias", internalType: "int128", type: "int128" },
          { name: "slope", internalType: "int128", type: "int128" },
          { name: "ts", internalType: "uint256", type: "uint256" },
          { name: "blk", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "prev_penalty_k",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardDistributor",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardReceiver",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "rewardReceiverChangeable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "set_all_unlock", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "_early_unlock", internalType: "bool", type: "bool" }],
    name: "set_early_unlock",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_penalty_k", internalType: "uint256", type: "uint256" }],
    name: "set_early_unlock_penalty_speed",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_penalty_treasury", internalType: "address", type: "address" }],
    name: "set_penalty_treasury",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "arg0", internalType: "uint256", type: "uint256" }],
    name: "slope_changes",
    outputs: [{ name: "", internalType: "int128", type: "int128" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "smart_wallet_checker",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "supply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "t", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_block", internalType: "uint256", type: "uint256" }],
    name: "totalSupplyAt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "arg0", internalType: "address", type: "address" }],
    name: "user_point_epoch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "arg0", internalType: "address", type: "address" },
      { name: "arg1", internalType: "uint256", type: "uint256" },
    ],
    name: "user_point_history",
    outputs: [
      {
        name: "",
        internalType: "struct IVotingEscrow.Point",
        type: "tuple",
        components: [
          { name: "bias", internalType: "int128", type: "int128" },
          { name: "slope", internalType: "int128", type: "int128" },
          { name: "ts", internalType: "uint256", type: "uint256" },
          { name: "blk", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_addr", internalType: "address", type: "address" },
      { name: "_idx", internalType: "uint256", type: "uint256" },
    ],
    name: "user_point_history__ts",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "withdraw", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "withdraw_early", outputs: [], stateMutability: "nonpayable" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "admin", internalType: "address", type: "address", indexed: false }],
    name: "ApplyOwnership",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "admin", internalType: "address", type: "address", indexed: false }],
    name: "CommitOwnership",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "provider", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
      { name: "locktime", internalType: "uint256", type: "uint256", indexed: true },
      { name: "_type", internalType: "int128", type: "int128", indexed: false },
      { name: "ts", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "status", internalType: "bool", type: "bool", indexed: false }],
    name: "EarlyUnlock",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "penalty_k", internalType: "uint256", type: "uint256", indexed: false }],
    name: "PenaltySpeed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "penalty_treasury", internalType: "address", type: "address", indexed: false }],
    name: "PenaltyTreasury",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "newReceiver", internalType: "address", type: "address", indexed: false }],
    name: "RewardReceiver",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "prevSupply", internalType: "uint256", type: "uint256", indexed: false },
      { name: "supply", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Supply",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "status", internalType: "bool", type: "bool", indexed: false }],
    name: "TotalUnlock",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "provider", internalType: "address", type: "address", indexed: true },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
      { name: "ts", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Withdraw",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "provider", internalType: "address", type: "address", indexed: true },
      { name: "penalty", internalType: "uint256", type: "uint256", indexed: false },
      { name: "time_left", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "WithdrawEarly",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ImmutableBeaconProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const immutableBeaconProxyAbi = [
  {
    type: "constructor",
    inputs: [{ name: "beacon", internalType: "contract UpgradeableBeacon", type: "address" }],
    stateMutability: "nonpayable",
  },
  { type: "fallback", stateMutability: "payable" },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "__beacon",
    outputs: [{ name: "", internalType: "contract UpgradeableBeacon", type: "address" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Liquidations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidationsAbi = [
  {
    type: "function",
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "address", type: "address" }],
    name: "getConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct Liquidations.ReserveConfigurationMap",
        type: "tuple",
        components: [{ name: "data", internalType: "uint256", type: "uint256" }],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "absorber", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "collateralAbsorbed", internalType: "uint256", type: "uint256", indexed: false },
      { name: "usdValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "AbsorbCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "absorber", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "basePaidOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "usdValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "AbsorbDebt",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "receiver", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "assets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "lendersAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "seizeMarket", internalType: "address", type: "address", indexed: true },
      { name: "seizedAssets", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Liquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "caller", internalType: "address", type: "address", indexed: true },
      { name: "borrower", internalType: "address", type: "address", indexed: true },
      { name: "repaidAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "repaidShares", internalType: "uint256", type: "uint256", indexed: false },
      { name: "seizedAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "badDebtAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "badDebtShares", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Liquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "asset", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "shareAmountRepaid", internalType: "uint256", type: "uint256", indexed: false },
      { name: "seizedCollateral", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Liquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "liquidator", internalType: "address", type: "address", indexed: true },
      { name: "violator", internalType: "address", type: "address", indexed: true },
      { name: "collateral", internalType: "address", type: "address", indexed: false },
      { name: "repayAssets", internalType: "uint256", type: "uint256", indexed: false },
      { name: "yieldBalance", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "Liquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "borrower", internalType: "address", type: "address", indexed: false },
      { name: "repayAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "cTokenCollateral", internalType: "address", type: "address", indexed: false },
      { name: "seizeTokens", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LiquidateBorrow",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address", indexed: true },
      { name: "debtAsset", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "debtToCover", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidatedCollateralAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "receiveAToken", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LiquidationCall",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "collateralAsset", internalType: "address", type: "address", indexed: true },
      { name: "debtAsset", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "debtToCover", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidatedCollateralAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "receiveAToken", internalType: "bool", type: "bool", indexed: false },
      { name: "useAToken", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LiquidationCall",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "collateral", internalType: "address", type: "address", indexed: true },
      { name: "principal", internalType: "address", type: "address", indexed: true },
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "debtToCover", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidatedCollateralAmount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidator", internalType: "address", type: "address", indexed: false },
      { name: "receiveAToken", internalType: "bool", type: "bool", indexed: false },
      { name: "liquidationFeeTo", internalType: "address", type: "address", indexed: false },
    ],
    name: "LiquidationCall",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "solidAccountOwner", internalType: "address", type: "address", indexed: true },
      { name: "solidAccountNumber", internalType: "uint256", type: "uint256", indexed: false },
      { name: "liquidAccountOwner", internalType: "address", type: "address", indexed: true },
      { name: "liquidAccountNumber", internalType: "uint256", type: "uint256", indexed: false },
      { name: "heldMarket", internalType: "uint256", type: "uint256", indexed: false },
      { name: "owedMarket", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "solidHeldUpdate",
        internalType: "struct IDolomiteMargin.BalanceUpdate",
        type: "tuple",
        components: [
          {
            name: "deltaWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "newPar",
            internalType: "struct IDolomiteMargin.Par",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint128", type: "uint128" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "solidOwedUpdate",
        internalType: "struct IDolomiteMargin.BalanceUpdate",
        type: "tuple",
        components: [
          {
            name: "deltaWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "newPar",
            internalType: "struct IDolomiteMargin.Par",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint128", type: "uint128" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "liquidHeldUpdate",
        internalType: "struct IDolomiteMargin.BalanceUpdate",
        type: "tuple",
        components: [
          {
            name: "deltaWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "newPar",
            internalType: "struct IDolomiteMargin.Par",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint128", type: "uint128" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "liquidOwedUpdate",
        internalType: "struct IDolomiteMargin.BalanceUpdate",
        type: "tuple",
        components: [
          {
            name: "deltaWei",
            internalType: "struct IDolomiteMargin.Wei",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "newPar",
            internalType: "struct IDolomiteMargin.Par",
            type: "tuple",
            components: [
              { name: "sign", internalType: "bool", type: "bool" },
              { name: "value", internalType: "uint128", type: "uint128" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogLiquidate",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Maestro
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const maestroAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_timelock", internalType: "Timelock", type: "address" },
      { name: "_contango", internalType: "contract IContango", type: "address" },
      { name: "_orderManager", internalType: "contract IOrderManager", type: "address" },
      { name: "_vault", internalType: "contract IVault", type: "address" },
      { name: "_permit2", internalType: "contract IPermit2", type: "address" },
      { name: "_spotExecutor", internalType: "contract SimpleSpotExecutor", type: "address" },
      { name: "_treasury", internalType: "address", type: "address" },
      { name: "_router", internalType: "contract Router", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "receive", stateMutability: "payable" },
  { type: "function", inputs: [], name: "ALL", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "INTEGRATIONS_SLOT",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "applyPermit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    name: "cancel",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "depositNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "depositWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "isIntegration",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "orderManager",
    outputs: [{ name: "", internalType: "contract IOrderManager", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "permit2",
    outputs: [{ name: "", internalType: "contract IPermit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "params",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "placeLinkedOrder",
    outputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "route",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "router",
    outputs: [{ name: "", internalType: "contract Router", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      { name: "whitelisted", internalType: "bool", type: "bool" },
    ],
    name: "setIntegration",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "spotExecutor",
    outputs: [{ name: "", internalType: "contract SimpleSpotExecutor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "swapAndDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "swapAndDepositNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "swapAndDepositWithPermit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToDeposit", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "swapAndDepositWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToReceive", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "swapAndWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "swapData",
        internalType: "struct SwapData",
        type: "tuple",
        components: [
          { name: "router", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "minAmountOut", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "to", internalType: "address payable", type: "address" },
    ],
    name: "swapAndWithdrawNative",
    outputs: [{ name: "output", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "timelock",
    outputs: [{ name: "", internalType: "Timelock", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "trade",
    outputs: [
      { name: "", internalType: "PositionId", type: "bytes32" },
      {
        name: "",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrder",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrderWithFees",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams1",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "linkedOrderParams2",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrders",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId1", internalType: "OrderId", type: "bytes32" },
      { name: "linkedOrderId2", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "linkedOrderParams1",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "linkedOrderParams2",
        internalType: "struct LinkedOrderParams",
        type: "tuple",
        components: [
          { name: "limitPrice", internalType: "uint128", type: "uint128" },
          { name: "tolerance", internalType: "uint128", type: "uint128" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "deadline", internalType: "uint32", type: "uint32" },
          { name: "orderType", internalType: "enum OrderType", type: "uint8" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeAndLinkedOrdersWithFees",
    outputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "linkedOrderId1", internalType: "OrderId", type: "bytes32" },
      { name: "linkedOrderId2", internalType: "OrderId", type: "bytes32" },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "tradeParams",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      {
        name: "feeParams",
        internalType: "struct FeeParams",
        type: "tuple",
        components: [
          { name: "token", internalType: "contract IERC20Metadata", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "basisPoints", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "tradeWithFees",
    outputs: [
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade_",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "transferPosition",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "usePermit2",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdrawNative",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "treasury", internalType: "address", type: "address", indexed: false },
      { name: "token", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "basisPoints", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "FeeCollected",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "integration", internalType: "address", type: "address", indexed: true },
      { name: "whitelisted", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "IntegrationSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "AboveMaxGasMultiplier" },
  { type: "error", inputs: [{ name: "gasMultiplier", internalType: "uint64", type: "uint64" }], name: "BelowMinGasMultiplier" },
  { type: "error", inputs: [], name: "CashflowCcyRequired" },
  { type: "error", inputs: [], name: "ClosingOnly" },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InstrumentAlreadyExists" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "int256", type: "int256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseCashflow",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "int256", type: "int256" },
    ],
    name: "InsufficientBaseOnOpen",
  },
  {
    type: "error",
    inputs: [
      { name: "required", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "InsufficientPermitAmount",
  },
  { type: "error", inputs: [], name: "InvalidCashflow" },
  { type: "error", inputs: [], name: "InvalidCashflowCcy" },
  {
    type: "error",
    inputs: [
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidDeadline",
  },
  { type: "error", inputs: [{ name: "symbol", internalType: "Symbol", type: "bytes16" }], name: "InvalidInstrument" },
  { type: "error", inputs: [{ name: "orderType", internalType: "enum OrderType", type: "uint8" }], name: "InvalidOrderType" },
  {
    type: "error",
    inputs: [
      { name: "forwardPrice", internalType: "uint256", type: "uint256" },
      { name: "limitPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidPrice",
  },
  { type: "error", inputs: [], name: "InvalidQuantity" },
  { type: "error", inputs: [{ name: "tolerance", internalType: "uint256", type: "uint256" }], name: "InvalidTolerance" },
  {
    type: "error",
    inputs: [
      { name: "orderId1", internalType: "OrderId", type: "bytes32" },
      { name: "orderId2", internalType: "OrderId", type: "bytes32" },
    ],
    name: "MismatchingPositionId",
  },
  {
    type: "error",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "requested", internalType: "uint256", type: "uint256" },
    ],
    name: "NotEnoughBalance",
  },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "NotFlashBorrowProvider" },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "NotNativeToken" },
  { type: "error", inputs: [], name: "OnlyFullClosureAllowedAfterExpiry" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderAlreadyExists" },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "orderId", internalType: "OrderId", type: "bytes32" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "blockTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "OrderExpired",
  },
  { type: "error", inputs: [{ name: "orderId", internalType: "OrderId", type: "bytes32" }], name: "OrderInvalidated" },
  { type: "error", inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }], name: "PositionDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceAboveLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "PriceBelowLimit",
  },
  {
    type: "error",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "nativeToken", internalType: "address", type: "address" },
    ],
    name: "SenderIsNotNativeToken",
  },
  { type: "error", inputs: [{ name: "msgSender", internalType: "address", type: "address" }], name: "Unauthorised" },
  { type: "error", inputs: [], name: "UnexpectedCallback" },
  { type: "error", inputs: [], name: "UnexpectedTrade" },
  { type: "error", inputs: [{ name: "integration", internalType: "address", type: "address" }], name: "UnknownIntegration" },
  { type: "error", inputs: [{ name: "token", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedToken" },
  { type: "error", inputs: [], name: "ZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MorphoBlueReverseLookup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const morphoBlueReverseLookupAbi = [
  { type: "constructor", inputs: [{ name: "_morpho", internalType: "contract IMorpho", type: "address" }], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }],
    name: "marketId",
    outputs: [{ name: "marketId_", internalType: "MorphoMarketId", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }],
    name: "marketIds",
    outputs: [{ name: "marketId", internalType: "MorphoMarketId", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "morpho",
    outputs: [{ name: "", internalType: "contract IMorpho", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nextPayload",
    outputs: [{ name: "", internalType: "uint40", type: "uint40" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "marketId", internalType: "MorphoMarketId", type: "bytes32" }],
    name: "payloads",
    outputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_marketId", internalType: "MorphoMarketId", type: "bytes32" }],
    name: "setMarket",
    outputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "payload", internalType: "Payload", type: "bytes5", indexed: true },
      { name: "marketId", internalType: "MorphoMarketId", type: "bytes32", indexed: true },
    ],
    name: "MarketSet",
  },
  { type: "error", inputs: [{ name: "marketId", internalType: "MorphoMarketId", type: "bytes32" }], name: "InvalidMarketId" },
  {
    type: "error",
    inputs: [
      { name: "marketId", internalType: "MorphoMarketId", type: "bytes32" },
      { name: "payload", internalType: "Payload", type: "bytes5" },
    ],
    name: "MarketAlreadySet",
  },
  { type: "error", inputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }], name: "MarketNotFound" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MorphoBlueReverseLookupErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const morphoBlueReverseLookupErrorsAbi = [
  { type: "error", inputs: [{ name: "marketId", internalType: "MorphoMarketId", type: "bytes32" }], name: "InvalidMarketId" },
  {
    type: "error",
    inputs: [
      { name: "marketId", internalType: "MorphoMarketId", type: "bytes32" },
      { name: "payload", internalType: "Payload", type: "bytes5" },
    ],
    name: "MarketAlreadySet",
  },
  { type: "error", inputs: [{ name: "payload", internalType: "Payload", type: "bytes5" }], name: "MarketNotFound" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MorphoBlueReverseLookupEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const morphoBlueReverseLookupEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "payload", internalType: "Payload", type: "bytes5", indexed: true },
      { name: "marketId", internalType: "MorphoMarketId", type: "bytes32", indexed: true },
    ],
    name: "MarketSet",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PositionActions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const positionActionsAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_env", internalType: "contract Env", type: "address" },
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_traderPk", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "CHECK_ENV_VAR",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "IS_SCRIPT", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  { type: "function", inputs: [], name: "IS_TEST", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "SNAP_DIR",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "closePosition",
    outputs: [
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "closePosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "closePosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "closePosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct TradeParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "limitPrice", internalType: "uint256", type: "uint256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
        ],
      },
      {
        name: "executionParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
      { name: "_cashflowToken", internalType: "contract IERC20Metadata", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "executeTrade",
    outputs: [
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "modifyPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "mm", internalType: "MoneyMarketId", type: "uint8" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "mm", internalType: "MoneyMarketId", type: "uint8" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "mm", internalType: "MoneyMarketId", type: "uint8" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
      { name: "_slippageTolerance", internalType: "uint256", type: "uint256" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "symbol", internalType: "Symbol", type: "bytes16" },
      { name: "mm", internalType: "MoneyMarketId", type: "uint8" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "openPosition",
    outputs: [
      { name: "positionId_", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
      { name: "cashflowUsed", internalType: "int256", type: "int256" },
    ],
    name: "prepareCashflow",
    outputs: [
      { name: "_cashflowToken", internalType: "contract IERC20Metadata", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "quoteFullyClose",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "quoteModify",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "quoteTrade",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "quoteWithCashflow",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "quoteWithLeverage",
    outputs: [
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_expiry", internalType: "uint32", type: "uint32" }],
    name: "setExpiry",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_nativeTokenWrapper", internalType: "contract IERC20Metadata", type: "address" }],
    name: "setNativeTokenWrapper",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_slippageTolerance", internalType: "uint256", type: "uint256" }],
    name: "setSlippageTolerance",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_testName", internalType: "string", type: "string" }],
    name: "setTestName",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_usePermit", internalType: "bool", type: "bool" }],
    name: "setUsePermit",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "slippageTolerance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "quote",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
    ],
    name: "submitTrade",
    outputs: [
      { name: "_positionId", internalType: "PositionId", type: "bytes32" },
      {
        name: "trade",
        internalType: "struct Trade",
        type: "tuple",
        components: [
          { name: "quantity", internalType: "int256", type: "int256" },
          {
            name: "swap",
            internalType: "struct SwapInfo",
            type: "tuple",
            components: [
              { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
              { name: "input", internalType: "int256", type: "int256" },
              { name: "output", internalType: "int256", type: "int256" },
              { name: "price", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "fee", internalType: "uint256", type: "uint256" },
          { name: "feeCcy", internalType: "enum Currency", type: "uint8" },
          { name: "forwardPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "testName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "trader",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "traderPk",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "error",
    inputs: [
      { name: "oldGas", internalType: "uint256", type: "uint256" },
      { name: "newGas", internalType: "uint256", type: "uint256" },
    ],
    name: "GasMismatch",
  },
  { type: "error", inputs: [{ name: "s", internalType: "string", type: "string" }], name: "InvalidStringNumber" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PositionNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const positionNftAbi = [
  { type: "constructor", inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "contractAddr", internalType: "address", type: "address" }],
    name: "contangoContracts",
    outputs: [{ name: "enabled", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "counter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "exists",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [{ name: "positionId_", internalType: "PositionId", type: "bytes32" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "name", outputs: [{ name: "", internalType: "string", type: "string" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "positionOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "contractAddr", internalType: "address", type: "address" },
      { name: "enabled", internalType: "bool", type: "bool" },
    ],
    name: "setContangoContract",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "contractAddr", internalType: "address", type: "address", indexed: true },
      { name: "enabled", internalType: "bool", type: "bool", indexed: true },
    ],
    name: "ContangoContractSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  { type: "error", inputs: [], name: "InvalidPositionId" },
  { type: "error", inputs: [{ name: "n", internalType: "uint256", type: "uint256" }], name: "InvalidUInt48" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SiloMoneyMarketView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const siloMoneyMarketViewAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_moneyMarketId", internalType: "MoneyMarketId", type: "uint8" },
      { name: "_contango", internalType: "contract IContango", type: "address" },
      { name: "_nativeToken", internalType: "contract IWETH9", type: "address" },
      { name: "_nativeUsdOracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_lens", internalType: "contract ISiloLens", type: "address" },
      { name: "_wstEthSilo", internalType: "contract ISilo", type: "address" },
      { name: "_stablecoin", internalType: "contract IERC20Metadata", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "availableActions",
    outputs: [{ name: "available", internalType: "enum AvailableActions[]", type: "uint8[]" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balances",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "balancesUSD",
    outputs: [
      {
        name: "balances_",
        internalType: "struct Balances",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "baseQuoteRate",
    outputs: [{ name: "rate_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "getSilo",
    outputs: [{ name: "silo_", internalType: "contract ISilo", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "irmRaw",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "lens",
    outputs: [{ name: "", internalType: "contract ISiloLens", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "limits",
    outputs: [
      {
        name: "limits_",
        internalType: "struct Limits",
        type: "tuple",
        components: [
          { name: "minBorrowing", internalType: "uint256", type: "uint256" },
          { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
          { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
          { name: "minLending", internalType: "uint256", type: "uint256" },
          { name: "maxLending", internalType: "uint256", type: "uint256" },
          { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "liquidity",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketId",
    outputs: [{ name: "", internalType: "MoneyMarketId", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "moneyMarketName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeUsdOracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "positionFactory",
    outputs: [{ name: "", internalType: "contract IUnderlyingPositionFactory", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInNativeToken",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }],
    name: "priceInUSD",
    outputs: [{ name: "price_", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "priceProvidersRepository",
    outputs: [{ name: "", internalType: "contract ISiloPriceProvidersRepository", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "prices",
    outputs: [
      {
        name: "prices_",
        internalType: "struct Prices",
        type: "tuple",
        components: [
          { name: "collateral", internalType: "uint256", type: "uint256" },
          { name: "debt", internalType: "uint256", type: "uint256" },
          { name: "unit", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rates",
    outputs: [
      { name: "borrowing", internalType: "uint256", type: "uint256" },
      { name: "lending", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "collateralAsset", internalType: "contract IERC20Metadata", type: "address" },
      { name: "debtAsset", internalType: "contract IERC20Metadata", type: "address" },
    ],
    name: "rawData",
    outputs: [
      {
        name: "data",
        internalType: "struct SiloMoneyMarketView.RawData",
        type: "tuple",
        components: [
          { name: "paused", internalType: "bool", type: "bool" },
          {
            name: "collateralData",
            internalType: "struct SiloMoneyMarketView.SiloData",
            type: "tuple",
            components: [
              {
                name: "utilizationData",
                internalType: "struct ISilo.UtilizationData",
                type: "tuple",
                components: [
                  { name: "totalDeposits", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
                  { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
                ],
              },
              {
                name: "irmConfig",
                internalType: "struct IInterestRateModelV2.Config",
                type: "tuple",
                components: [
                  { name: "uopt", internalType: "int256", type: "int256" },
                  { name: "ucrit", internalType: "int256", type: "int256" },
                  { name: "ulow", internalType: "int256", type: "int256" },
                  { name: "ki", internalType: "int256", type: "int256" },
                  { name: "kcrit", internalType: "int256", type: "int256" },
                  { name: "klow", internalType: "int256", type: "int256" },
                  { name: "klin", internalType: "int256", type: "int256" },
                  { name: "beta", internalType: "int256", type: "int256" },
                  { name: "ri", internalType: "int256", type: "int256" },
                  { name: "Tcrit", internalType: "int256", type: "int256" },
                ],
              },
              { name: "protocolShareFee", internalType: "uint256", type: "uint256" },
              {
                name: "assetInterestData",
                internalType: "struct ISilo.AssetInterestData",
                type: "tuple",
                components: [
                  { name: "harvestedProtocolFees", internalType: "uint256", type: "uint256" },
                  { name: "protocolFees", internalType: "uint256", type: "uint256" },
                  { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
                  { name: "status", internalType: "enum ISilo.AssetStatus", type: "uint8" },
                ],
              },
              {
                name: "assetStorage",
                internalType: "struct ISilo.AssetStorage",
                type: "tuple",
                components: [
                  { name: "collateralToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "collateralOnlyToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "debtToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "totalDeposits", internalType: "uint256", type: "uint256" },
                  { name: "collateralOnlyDeposits", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "rewardData",
                internalType: "struct SiloMoneyMarketView.RewardData",
                type: "tuple",
                components: [
                  { name: "siloAsset", internalType: "contract IERC20Metadata", type: "address" },
                  {
                    name: "rewardToken",
                    internalType: "struct TokenData",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "name", internalType: "string", type: "string" },
                      { name: "symbol", internalType: "string", type: "string" },
                      { name: "decimals", internalType: "uint8", type: "uint8" },
                      { name: "unit", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "assetData",
                    internalType: "struct ISiloIncentivesController.AssetData",
                    type: "tuple",
                    components: [
                      { name: "index", internalType: "uint256", type: "uint256" },
                      { name: "emissionPerSecond", internalType: "uint256", type: "uint256" },
                      { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  { name: "claimable", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "paused", internalType: "bool", type: "bool" },
            ],
          },
          {
            name: "debtData",
            internalType: "struct SiloMoneyMarketView.SiloData",
            type: "tuple",
            components: [
              {
                name: "utilizationData",
                internalType: "struct ISilo.UtilizationData",
                type: "tuple",
                components: [
                  { name: "totalDeposits", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
                  { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
                ],
              },
              {
                name: "irmConfig",
                internalType: "struct IInterestRateModelV2.Config",
                type: "tuple",
                components: [
                  { name: "uopt", internalType: "int256", type: "int256" },
                  { name: "ucrit", internalType: "int256", type: "int256" },
                  { name: "ulow", internalType: "int256", type: "int256" },
                  { name: "ki", internalType: "int256", type: "int256" },
                  { name: "kcrit", internalType: "int256", type: "int256" },
                  { name: "klow", internalType: "int256", type: "int256" },
                  { name: "klin", internalType: "int256", type: "int256" },
                  { name: "beta", internalType: "int256", type: "int256" },
                  { name: "ri", internalType: "int256", type: "int256" },
                  { name: "Tcrit", internalType: "int256", type: "int256" },
                ],
              },
              { name: "protocolShareFee", internalType: "uint256", type: "uint256" },
              {
                name: "assetInterestData",
                internalType: "struct ISilo.AssetInterestData",
                type: "tuple",
                components: [
                  { name: "harvestedProtocolFees", internalType: "uint256", type: "uint256" },
                  { name: "protocolFees", internalType: "uint256", type: "uint256" },
                  { name: "interestRateTimestamp", internalType: "uint64", type: "uint64" },
                  { name: "status", internalType: "enum ISilo.AssetStatus", type: "uint8" },
                ],
              },
              {
                name: "assetStorage",
                internalType: "struct ISilo.AssetStorage",
                type: "tuple",
                components: [
                  { name: "collateralToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "collateralOnlyToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "debtToken", internalType: "contract IERC20Metadata", type: "address" },
                  { name: "totalDeposits", internalType: "uint256", type: "uint256" },
                  { name: "collateralOnlyDeposits", internalType: "uint256", type: "uint256" },
                  { name: "totalBorrowAmount", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "rewardData",
                internalType: "struct SiloMoneyMarketView.RewardData",
                type: "tuple",
                components: [
                  { name: "siloAsset", internalType: "contract IERC20Metadata", type: "address" },
                  {
                    name: "rewardToken",
                    internalType: "struct TokenData",
                    type: "tuple",
                    components: [
                      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
                      { name: "name", internalType: "string", type: "string" },
                      { name: "symbol", internalType: "string", type: "string" },
                      { name: "decimals", internalType: "uint8", type: "uint8" },
                      { name: "unit", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "assetData",
                    internalType: "struct ISiloIncentivesController.AssetData",
                    type: "tuple",
                    components: [
                      { name: "index", internalType: "uint256", type: "uint256" },
                      { name: "emissionPerSecond", internalType: "uint256", type: "uint256" },
                      { name: "lastUpdateTimestamp", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  { name: "claimable", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "paused", internalType: "bool", type: "bool" },
            ],
          },
          { name: "userUnclaimedRewards", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "repository",
    outputs: [{ name: "", internalType: "contract ISiloRepository", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "rewards",
    outputs: [
      {
        name: "borrowing",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "lending",
        internalType: "struct Reward[]",
        type: "tuple[]",
        components: [
          {
            name: "token",
            internalType: "struct TokenData",
            type: "tuple",
            components: [
              { name: "token", internalType: "contract IERC20Metadata", type: "address" },
              { name: "name", internalType: "string", type: "string" },
              { name: "symbol", internalType: "string", type: "string" },
              { name: "decimals", internalType: "uint8", type: "uint8" },
              { name: "unit", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "rate", internalType: "uint256", type: "uint256" },
          { name: "claimable", internalType: "uint256", type: "uint256" },
          { name: "usdPrice", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "stablecoin",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "thresholds",
    outputs: [
      { name: "ltv", internalType: "uint256", type: "uint256" },
      { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "wstEthSilo",
    outputs: [{ name: "", internalType: "contract ISilo", type: "address" }],
    stateMutability: "view",
  },
  { type: "error", inputs: [{ name: "n", internalType: "uint256", type: "uint256" }], name: "InvalidUInt8" },
  { type: "error", inputs: [{ name: "asset", internalType: "contract IERC20Metadata", type: "address" }], name: "UnsupportedAsset" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SiloTestLiquidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const siloTestLiquidatorAbi = [
  {
    type: "function",
    inputs: [
      { name: "_users", internalType: "address[]", type: "address[]" },
      { name: "_silo", internalType: "contract ISilo", type: "address" },
    ],
    name: "executeLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_user", internalType: "address", type: "address" },
      { name: "_assets", internalType: "address[]", type: "address[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "_shareAmountsToRepaid", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "siloLiquidationCallback",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SimpleSpotExecutor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const simpleSpotExecutorAbi = [
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToBuy", internalType: "contract IERC20Metadata", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "amountIn", internalType: "uint256", type: "uint256" },
      { name: "minAmountOut", internalType: "uint256", type: "uint256" },
      { name: "router", internalType: "address", type: "address" },
      { name: "swapBytes", internalType: "bytes", type: "bytes" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "executeSwap",
    outputs: [{ name: "output", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "tokenToBuy", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "amountOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
  {
    type: "error",
    inputs: [
      { name: "minExpected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "InsufficientAmountOut",
  },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SimpleSpotExecutorErrors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const simpleSpotExecutorErrorsAbi = [
  {
    type: "error",
    inputs: [
      { name: "minExpected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "InsufficientAmountOut",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SimpleSpotExecutorEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const simpleSpotExecutorEventsAbi = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "tokenToBuy", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "amountOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SpotExecutor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotExecutorAbi = [
  {
    type: "function",
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address" },
      { name: "tokenToBuy", internalType: "contract IERC20Metadata", type: "address" },
      { name: "inputCcy", internalType: "enum Currency", type: "uint8" },
      { name: "unit", internalType: "uint256", type: "uint256" },
      {
        name: "execParams",
        internalType: "struct ExecutionParams",
        type: "tuple",
        components: [
          { name: "spender", internalType: "address", type: "address" },
          { name: "router", internalType: "address", type: "address" },
          { name: "swapAmount", internalType: "uint256", type: "uint256" },
          { name: "swapBytes", internalType: "bytes", type: "bytes" },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
        ],
      },
    ],
    name: "executeSwap",
    outputs: [
      { name: "input", internalType: "int256", type: "int256" },
      { name: "output", internalType: "int256", type: "int256" },
      { name: "price", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "tokenToSell", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "tokenToBuy", internalType: "contract IERC20Metadata", type: "address", indexed: true },
      { name: "amountIn", internalType: "int256", type: "int256", indexed: false },
      { name: "amountOut", internalType: "int256", type: "int256", indexed: false },
      { name: "price", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StrategyBlocks
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const strategyBlocksAbi = [
  { type: "receive", stateMutability: "payable" },
  { type: "function", inputs: [], name: "ALL", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "BALANCE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "FLASH_LOAN_HASH_SLOT",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "_pullFundsWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "erc20Permit2",
    outputs: [{ name: "", internalType: "contract IPermit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "erc721Permit2",
    outputs: [{ name: "", internalType: "contract IERC721Permit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "lens",
    outputs: [{ name: "", internalType: "contract ContangoLens", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "maestro",
    outputs: [{ name: "", internalType: "contract IMaestro", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieveFromVault",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "to", internalType: "address payable", type: "address" }],
    name: "retrieveNative",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "spotExecutor",
    outputs: [{ name: "", internalType: "contract SimpleSpotExecutor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "BeginStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "EndStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Unpaused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
  { type: "error", inputs: [], name: "InvalidCallback" },
  { type: "error", inputs: [], name: "NotNativeToken" },
  { type: "error", inputs: [], name: "NotPositionNFT" },
  { type: "error", inputs: [], name: "PositionLeftBehind" },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StrategyBuilder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const strategyBuilderAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_maestro", internalType: "contract IMaestro", type: "address" },
      { name: "_erc721Permit2", internalType: "contract IERC721Permit2", type: "address" },
      { name: "_lens", internalType: "contract ContangoLens", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "receive", stateMutability: "payable" },
  { type: "function", inputs: [], name: "ALL", outputs: [{ name: "", internalType: "uint256", type: "uint256" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "BALANCE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "FLASH_LOAN_HASH_SLOT",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      {
        name: "permit",
        internalType: "struct EIP2098Permit",
        type: "tuple",
        components: [
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "vs", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "_pullFundsWithPermit2",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "contango",
    outputs: [{ name: "", internalType: "contract IContango", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "repayTo", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "continueActionProcessing",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "erc20Permit2",
    outputs: [{ name: "", internalType: "contract IPermit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "erc721Permit2",
    outputs: [{ name: "", internalType: "contract IERC721Permit2", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "lens",
    outputs: [{ name: "", internalType: "contract ContangoLens", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "maestro",
    outputs: [{ name: "", internalType: "contract IMaestro", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "nativeToken",
    outputs: [{ name: "", internalType: "contract IWETH9", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable" },
  { type: "function", inputs: [], name: "paused", outputs: [{ name: "", internalType: "bool", type: "bool" }], stateMutability: "view" },
  {
    type: "function",
    inputs: [],
    name: "positionNFT",
    outputs: [{ name: "", internalType: "contract PositionNFT", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "steps",
        internalType: "struct StepCall[]",
        type: "tuple[]",
        components: [
          { name: "step", internalType: "enum Step", type: "uint8" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "returnPositionsTo", internalType: "address", type: "address" },
    ],
    name: "process",
    outputs: [
      {
        name: "results",
        internalType: "struct StepResult[]",
        type: "tuple[]",
        components: [
          { name: "step", internalType: "enum Step", type: "uint8" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "steps",
        internalType: "struct StepCall[]",
        type: "tuple[]",
        components: [
          { name: "step", internalType: "enum Step", type: "uint8" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "process",
    outputs: [
      {
        name: "results",
        internalType: "struct StepResult[]",
        type: "tuple[]",
        components: [
          { name: "step", internalType: "enum Step", type: "uint8" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieve",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IERC20Metadata", type: "address" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "retrieveFromVault",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "to", internalType: "address payable", type: "address" }],
    name: "retrieveNative",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "spotExecutor",
    outputs: [{ name: "", internalType: "contract SimpleSpotExecutor", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "contract IVault", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "BeginStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
      { name: "owner", internalType: "address", type: "address", indexed: true },
    ],
    name: "EndStrategy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "action", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "position1", internalType: "PositionId", type: "bytes32", indexed: false },
      { name: "position2", internalType: "PositionId", type: "bytes32", indexed: false },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "StragegyExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "tokenIn", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tokenOut", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "amountOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "SwapExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "account", internalType: "address", type: "address", indexed: false }],
    name: "Unpaused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
  { type: "error", inputs: [], name: "InvalidCallback" },
  { type: "error", inputs: [{ name: "step", internalType: "enum Step", type: "uint8" }], name: "InvalidStep" },
  { type: "error", inputs: [], name: "NotNativeToken" },
  { type: "error", inputs: [], name: "NotPositionNFT" },
  { type: "error", inputs: [], name: "PositionLeftBehind" },
  { type: "error", inputs: [], name: "ZeroDestination" },
  { type: "error", inputs: [], name: "ZeroPayer" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SwapRouter02
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const swapRouter02Abi = [
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct SwapRouter02.ExactInputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "amountOutMinimum", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "exactInput",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct SwapRouter02.ExactInputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          { name: "amountOutMinimum", internalType: "uint256", type: "uint256" },
          { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
        ],
      },
    ],
    name: "exactInputSingle",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct SwapRouter02.ExactOutputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "exactOutput",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct SwapRouter02.ExactOutputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" },
          { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
        ],
      },
    ],
    name: "exactOutputSingle",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TSQuoter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tsQuoterAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_contango", internalType: "contract Contango", type: "address" },
      { name: "_contangoLens", internalType: "contract ContangoLens", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct TSQuoter.TSQuoteParams",
        type: "tuple",
        components: [
          { name: "positionId", internalType: "PositionId", type: "bytes32" },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "leverage", internalType: "uint256", type: "uint256" },
          { name: "cashflow", internalType: "int256", type: "int256" },
          { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
          { name: "slippageTolerance", internalType: "uint256", type: "uint256" },
          {
            name: "meta",
            internalType: "struct TSQuoter.TSMetaParams",
            type: "tuple",
            components: [
              {
                name: "instrument",
                internalType: "struct TSQuoter.TSInstrument",
                type: "tuple",
                components: [
                  { name: "closingOnly", internalType: "bool", type: "bool" },
                  {
                    name: "base",
                    internalType: "struct TSQuoter.Token",
                    type: "tuple",
                    components: [
                      { name: "addr", internalType: "address", type: "address" },
                      { name: "symbol", internalType: "string", type: "string" },
                      { name: "name", internalType: "string", type: "string" },
                      { name: "decimals", internalType: "uint256", type: "uint256" },
                      { name: "unit", internalType: "uint256", type: "uint256" },
                    ],
                  },
                  {
                    name: "quote",
                    internalType: "struct TSQuoter.Token",
                    type: "tuple",
                    components: [
                      { name: "addr", internalType: "address", type: "address" },
                      { name: "symbol", internalType: "string", type: "string" },
                      { name: "name", internalType: "string", type: "string" },
                      { name: "decimals", internalType: "uint256", type: "uint256" },
                      { name: "unit", internalType: "uint256", type: "uint256" },
                    ],
                  },
                ],
              },
              {
                name: "prices",
                internalType: "struct Prices",
                type: "tuple",
                components: [
                  { name: "collateral", internalType: "uint256", type: "uint256" },
                  { name: "debt", internalType: "uint256", type: "uint256" },
                  { name: "unit", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "balances",
                internalType: "struct Balances",
                type: "tuple",
                components: [
                  { name: "collateral", internalType: "uint256", type: "uint256" },
                  { name: "debt", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "normalisedBalances",
                internalType: "struct TSQuoter.NormalisedBalances",
                type: "tuple",
                components: [
                  { name: "collateral", internalType: "uint256", type: "uint256" },
                  { name: "debt", internalType: "uint256", type: "uint256" },
                  { name: "unit", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "liquidity",
                internalType: "struct TSQuoter.Liquidity",
                type: "tuple",
                components: [
                  { name: "borrowingLiquidity", internalType: "uint256", type: "uint256" },
                  { name: "lendingLiquidity", internalType: "uint256", type: "uint256" },
                ],
              },
              {
                name: "ltv",
                internalType: "struct TSQuoter.Ltv",
                type: "tuple",
                components: [
                  { name: "ltv", internalType: "uint256", type: "uint256" },
                  { name: "liquidationThreshold", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "fee", internalType: "uint256", type: "uint256" },
              {
                name: "limits",
                internalType: "struct Limits",
                type: "tuple",
                components: [
                  { name: "minBorrowing", internalType: "uint256", type: "uint256" },
                  { name: "maxBorrowing", internalType: "uint256", type: "uint256" },
                  { name: "minBorrowingForRewards", internalType: "uint256", type: "uint256" },
                  { name: "minLending", internalType: "uint256", type: "uint256" },
                  { name: "maxLending", internalType: "uint256", type: "uint256" },
                  { name: "minLendingForRewards", internalType: "uint256", type: "uint256" },
                ],
              },
            ],
          },
          { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
          { name: "flashFee", internalType: "uint256", type: "uint256" },
          { name: "spotExecutor", internalType: "address", type: "address" },
          {
            name: "liquidityBuffer",
            internalType: "struct TSQuoter.LiquidityBuffer",
            type: "tuple",
            components: [
              { name: "lending", internalType: "uint256", type: "uint256" },
              { name: "borrowing", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "flashBorrowSupported", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "____tsQuote",
    outputs: [
      {
        name: "",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "_provider", internalType: "contract IERC7399", type: "address" }],
    name: "addFlashLoanProvider",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "contangoLens",
    outputs: [{ name: "", internalType: "contract ContangoLens", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "flashLoanProviders",
    outputs: [{ name: "", internalType: "contract IERC7399", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "liquidityBuffer",
    outputs: [
      { name: "lending", internalType: "uint256", type: "uint256" },
      { name: "borrowing", internalType: "uint256", type: "uint256" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
      { name: "slippageTolerance", internalType: "uint256", type: "uint256" },
    ],
    name: "quote",
    outputs: [
      {
        name: "result",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "positionId", internalType: "PositionId", type: "bytes32" },
      { name: "quantity", internalType: "int256", type: "int256" },
      { name: "leverage", internalType: "uint256", type: "uint256" },
      { name: "cashflow", internalType: "int256", type: "int256" },
      { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
      { name: "slippageTolerance", internalType: "uint256", type: "uint256" },
      { name: "dex", internalType: "string", type: "string" },
    ],
    name: "quoteRealDex",
    outputs: [
      {
        name: "result",
        internalType: "struct TSQuote",
        type: "tuple",
        components: [
          {
            name: "tradeParams",
            internalType: "struct TradeParams",
            type: "tuple",
            components: [
              { name: "positionId", internalType: "PositionId", type: "bytes32" },
              { name: "quantity", internalType: "int256", type: "int256" },
              { name: "limitPrice", internalType: "uint256", type: "uint256" },
              { name: "cashflowCcy", internalType: "enum Currency", type: "uint8" },
              { name: "cashflow", internalType: "int256", type: "int256" },
            ],
          },
          {
            name: "execParams",
            internalType: "struct ExecutionParams",
            type: "tuple",
            components: [
              { name: "spender", internalType: "address", type: "address" },
              { name: "router", internalType: "address", type: "address" },
              { name: "swapAmount", internalType: "uint256", type: "uint256" },
              { name: "swapBytes", internalType: "bytes", type: "bytes" },
              { name: "flashLoanProvider", internalType: "contract IERC7399", type: "address" },
            ],
          },
          { name: "quantity", internalType: "int256", type: "int256" },
          { name: "cashflowUsed", internalType: "int256", type: "int256" },
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "fullyClosing", internalType: "bool", type: "bool" },
          { name: "transactionFees", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  { type: "function", inputs: [], name: "removeAllFlashLoanProviders", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [
      {
        name: "_liquidityBuffer",
        internalType: "struct TSQuoter.LiquidityBuffer",
        type: "tuple",
        components: [
          { name: "lending", internalType: "uint256", type: "uint256" },
          { name: "borrowing", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "setLiquidityBuffer",
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TimelockController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const timelockControllerAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "minDelay", internalType: "uint256", type: "uint256" },
      { name: "proposers", internalType: "address[]", type: "address[]" },
      { name: "executors", internalType: "address[]", type: "address[]" },
      { name: "admin", internalType: "address", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "CANCELLER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "EXECUTOR_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "PROPOSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "TIMELOCK_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "cancel",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "target", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "payload", internalType: "bytes", type: "bytes" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "targets", internalType: "address[]", type: "address[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "payloads", internalType: "bytes[]", type: "bytes[]" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [],
    name: "getMinDelay",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "getTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "target", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
    ],
    name: "hashOperation",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "targets", internalType: "address[]", type: "address[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "payloads", internalType: "bytes[]", type: "bytes[]" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
    ],
    name: "hashOperationBatch",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "isOperation",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "isOperationDone",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "isOperationPending",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "isOperationReady",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "target", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "delay", internalType: "uint256", type: "uint256" },
    ],
    name: "schedule",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "targets", internalType: "address[]", type: "address[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "payloads", internalType: "bytes[]", type: "bytes[]" },
      { name: "predecessor", internalType: "bytes32", type: "bytes32" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "delay", internalType: "uint256", type: "uint256" },
    ],
    name: "scheduleBatch",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "newDelay", internalType: "uint256", type: "uint256" }],
    name: "updateDelay",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "index", internalType: "uint256", type: "uint256", indexed: true },
      { name: "target", internalType: "address", type: "address", indexed: false },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "CallExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "salt", internalType: "bytes32", type: "bytes32", indexed: false },
    ],
    name: "CallSalt",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "index", internalType: "uint256", type: "uint256", indexed: true },
      { name: "target", internalType: "address", type: "address", indexed: false },
      { name: "value", internalType: "uint256", type: "uint256", indexed: false },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false },
      { name: "predecessor", internalType: "bytes32", type: "bytes32", indexed: false },
      { name: "delay", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "CallScheduled",
  },
  { type: "event", anonymous: false, inputs: [{ name: "id", internalType: "bytes32", type: "bytes32", indexed: true }], name: "Cancelled" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldDuration", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newDuration", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "MinDelayChange",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableAbi = [
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousAdmin", internalType: "address", type: "address", indexed: false },
      { name: "newAdmin", internalType: "address", type: "address", indexed: false },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "beacon", internalType: "address", type: "address", indexed: true }],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UnderlyingPositionFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const underlyingPositionFactoryAbi = [
  { type: "constructor", inputs: [{ name: "timelock", internalType: "Timelock", type: "address" }], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "createUnderlyingPosition",
    outputs: [{ name: "imm", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "positionId", internalType: "PositionId", type: "bytes32" }],
    name: "moneyMarket",
    outputs: [{ name: "imm", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "mm", internalType: "MoneyMarketId", type: "uint8" }],
    name: "moneyMarket",
    outputs: [{ name: "", internalType: "contract IMoneyMarket", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "moneyMarketId", internalType: "MoneyMarketId", type: "uint8" }],
    name: "moneyMarkets",
    outputs: [
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address" },
      { name: "needsAccount", internalType: "bool", type: "bool" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "imm", internalType: "contract IMoneyMarket", type: "address" }],
    name: "registerMoneyMarket",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "mm", internalType: "MoneyMarketId", type: "uint8", indexed: true },
      { name: "moneyMarket", internalType: "contract IMoneyMarket", type: "address", indexed: true },
    ],
    name: "MoneyMarketRegistered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "previousAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "newAdminRole", internalType: "bytes32", type: "bytes32", indexed: true },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "sender", internalType: "address", type: "address", indexed: true },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "positionId", internalType: "PositionId", type: "bytes32", indexed: true },
    ],
    name: "UnderlyingPositionCreated",
  },
  { type: "error", inputs: [{ name: "mm", internalType: "MoneyMarketId", type: "uint8" }], name: "InvalidMoneyMarket" },
  {
    type: "error",
    inputs: [
      { name: "mm", internalType: "MoneyMarketId", type: "uint8" },
      { name: "imm", internalType: "contract IMoneyMarket", type: "address" },
    ],
    name: "MoneyMarketAlreadyRegistered",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UniswapPoolStub
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uniswapPoolStubAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_token0", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_token1", internalType: "contract IERC20Metadata", type: "address" },
      { name: "_token0Oracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_token1Oracle", internalType: "contract IAggregatorV2V3", type: "address" },
      { name: "_token0Quoted", internalType: "bool", type: "bool" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "absoluteSpread",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "value", internalType: "int256", type: "int256" }],
    name: "setAbsoluteSpread",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "zeroForOne", internalType: "bool", type: "bool" },
      { name: "amountSpecified", internalType: "int256", type: "int256" },
      { name: "", internalType: "uint160", type: "uint160" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "swap",
    outputs: [
      { name: "amount0", internalType: "int256", type: "int256" },
      { name: "amount1", internalType: "int256", type: "int256" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "token0",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token0Oracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token0Quoted",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token1",
    outputs: [{ name: "", internalType: "contract IERC20Metadata", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token1Oracle",
    outputs: [{ name: "", internalType: "contract IAggregatorV2V3", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "spread", internalType: "int256", type: "int256", indexed: false }],
    name: "SpreadSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "recipient", internalType: "address", type: "address", indexed: false },
      { name: "zeroForOne", internalType: "bool", type: "bool", indexed: false },
      { name: "amount0", internalType: "int256", type: "int256", indexed: false },
      { name: "amount1", internalType: "int256", type: "int256", indexed: false },
      { name: "oraclePrice", internalType: "int256", type: "int256", indexed: false },
      { name: "price", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "Swap",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token0", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "token1", internalType: "contract IERC20Metadata", type: "address", indexed: false },
      { name: "token0Oracle", internalType: "contract IAggregatorV2V3", type: "address", indexed: false },
      { name: "token1Oracle", internalType: "contract IAggregatorV2V3", type: "address", indexed: false },
      { name: "token0Quoted", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "UniswapPoolStubCreated",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
      { name: "diff", internalType: "uint256", type: "uint256" },
    ],
    name: "TooLittleRepaid",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
      { name: "diff", internalType: "uint256", type: "uint256" },
    ],
    name: "TooMuchRepaid",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UniswapV3Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uniswapV3FactoryAbi = [
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint24", type: "uint24" },
    ],
    name: "getPool",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UniswapV3Pool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uniswapV3PoolAbi = [
  {
    type: "function",
    inputs: [],
    name: "token0",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "token1",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UpgradeableBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const upgradeableBeaconAbi = [
  { type: "constructor", inputs: [{ name: "implementation_", internalType: "address", type: "address" }], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  { type: "function", inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "implementation", internalType: "address", type: "address", indexed: true }],
    name: "Upgraded",
  },
] as const
